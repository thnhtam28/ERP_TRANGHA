@model IQueryable<ModuleRelationshipViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Administration.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    Layout = null;
}

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        </p>
    </div>
}

@helper GridColumnName(string name, int id)
{
    @name
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

<div class="form-edit-inline">
    @Html.Action("Create", "ModuleRelationship", new { area = "Administration", First_ModuleName = ViewBag.First_ModuleName })
</div>

@using (Ajax.BeginForm("Delete", "ModuleRelationship"
        , new AjaxOptions()
        {
            HttpMethod = "POST",
            OnSuccess = "ModuleRelationshipFormEdit_OnSuccess"
        }
        , new { id = "ModuleRelationshipFormDelete", @class = "form-horizontal" })
    )
{
    @Html.AntiForgeryToken()

    @Html.Grid(Model).Columns(columns =>
    {
        columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled("First_ModuleName").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.First_ModuleName, u.Id));
        columns.Add().Titled("First_MetadataFieldName").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.First_MetadataFieldName, u.Id));
        columns.Add().Titled("Second_ModuleName").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Second_ModuleName, u.Id));
        columns.Add().Titled("Second_ModuleName_Alias").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Second_ModuleName_Alias, u.Id));
        columns.Add().Titled("Second_MetadataFieldName").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Second_MetadataFieldName, u.Id));
        columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
    })    
}

<script type="text/javascript">
    function CheckIsval() {
        if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
            alert("Phải chọn ít nhất 1 item.");
            return false;
        }
        else {
            if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                return true;
            }
            else {
                return false;
            }
        }
    }

    $('[name="Delete"]').click(function () {
        if (confirm('Bạn có chắc muốn xóa item ?')) {
            $(this).closest('tr').children('td').each(function (i, e) {
                $(this).find("input.class-delete-all").prop("checked", true);
                return true;
            })
        }
        else {
            return false;
        }

    })
</script>