@model IQueryable<LogLoyaltyPointViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_LogLoyaltyPoint;
    Layout = null;
    //bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    //if (isPopup)
    //{
    //    Layout = "~/Views/Shared/_PopupLayout.cshtml";
    //}
    //else
    //{
    //    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    //}
    
    //Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    //{        
    //    ModuleName = "LogLoyaltyPoint",
    //    ActionName = "Index",
    //    PageTitle = ViewBag.Title,
    //    DisplaySearchPanel = true,
    //    IsPopup = false,
    //    DisplayBackButton = false
    //};
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        </p>
    </div>
}

@helper GridColumnName(string name, int id)
{

        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("Detail", "ProductInvoice" , new { Id= id })">@name</a>
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@*@using(Html.BeginPageHeaderContainer(pageSetting))
{

}*@

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

        @Html.Grid(Model).Columns(columns =>
        {
            columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add().Titled(Wording.ProductInvoiceCode).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.ProductInvoiceCode, u.Id));
            //columns.Add(u => u.CreatedUserId).Titled(Wording.CreatedUserId).SetWidth(100).RenderValueAs(u => u.CreatedUserName);
            columns.Add(u => u.ProductInvoiceCode).Titled(Wording.ProductInvoiceCode).SetWidth(100);
            columns.Add(u => u.ProductInvoiceDate).Titled(Wording.CreatedDate).SetWidth(100);
            columns.Add(u => u.PlusPoint).Titled(Wording.LogPoint).SetWidth(100);
            columns.Add(u => u.TotalPoint).Titled(Wording.TotalPoint).SetWidth(100);
        
        }).WithPaging(10)