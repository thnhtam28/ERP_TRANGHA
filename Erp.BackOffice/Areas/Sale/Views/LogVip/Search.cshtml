@model List<ProductInvoiceViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html
@using PagedList.Mvc;

@{
    ViewBag.Title = "Tìm kiếm xếp hạng";
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    var jsCallback = Request["jsCallback"] == null ? "" : Request["jsCallback"].ToString();
    PagedList.IPagedList<ProductInvoiceViewModel> data = (PagedList.IPagedList<ProductInvoiceViewModel>)ViewBag.data;
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "LogVip",
        ActionName = "Search",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    int rowNumber = 0;
    int numberOfItem = 30;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    var top1 = "";
    string Status = Request["Status"] != null ? Request["Status"] : "";
    var url = Request.Url;
    string year = Request["year"] != null ? Request["year"] : DateTime.Now.Year.ToString();
    string branchId = Request["branchId"] != null ? Request["branchId"] : "";
    if (Request["branchId"] == null)
    {
        branchId = Erp.BackOffice.Helpers.Common.CurrentUser.BranchId.Value.ToString();
    }
    ViewData["branchId"] = branchId;
}


<style type="text/css">
    .product-invoice-isdeleted {
        text-decoration: line-through;
    }
</style>

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

@helper GridColumnCommand(int id)
{
    @*<a onclick="printInvoice(@id)" class="btn btn-primary btn-mini"><i class="fa fa-print"></i></a>*@

    <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
        <i class="ace-icon fa fa-trash"></i>
    </button>
}

@helper GridColumnName(int? customerid, string customername, string name, int id, string note, string reason, bool isPopup = false, string jsCallback = null)
{
if (isPopup)
{
        <a onclick="parent.selectItemCustomer(@id, '@name','@customername','@customerid')">@name</a>
}
else
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("Detail", "ProductInvoice", new { Id = id })">@name</a>

    if (!string.IsNullOrEmpty(note) || !string.IsNullOrEmpty(reason))
    {
        note = note + "; " + reason;
            <span class="help-button" data-rel="tooltip" data-placement="bottom" data-original-title="@note">?</span>
    }
}

}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@helper GridColumnStatusName(string status)
{
switch (status)
{
    case "pending":
            <span class="label label-info">@Wording.OrderStatusDisplay_pending</span>
        break;
    case "inprogress":
            <span class="label label-warning">@Wording.OrderStatusDisplay_inprogress</span>
        break;
    case "shipping":
            <span class="label label-warning">@Wording.OrderStatusDisplay_shipping</span>
        break;
    case "complete":
            <span class="label label-success">@Wording.OrderStatusDisplay_complete</span>
        break;
    case "delete":
            <span class="label label-danger">@Wording.OrderStatusDisplay_delete</span>
        break;
    case "deposit":
            <span class="label label-warning">Đặt cọc</span>
        break;

}
}
@helper renderCusstomer(int? CustomerId, string CustomerName)
{
    @CustomerName
    @*<a onclick="OpenPopup('@Url.Action("Detail", "Customer", new { area = "Account", Id = CustomerId, IsPopup = true })', '', 0, 0)">
            @CusromerName
        </a>*@
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
          @*@Html.DropDownList("branchId", SelectListHelper.GetSelectList_BranchByUser(Request["branchId"], "Chi nhánh"))*@

        @Html.DropDownList("branchId", SelectListHelper.GetSelectList_Branch(ViewData["branchId"], Wording.BranchName))
           @*@Html.DropDownList("branchId", SelectListHelper.GetSelectList_Branch(Request["branchId"], "Chi nhánh"))*@


          @Html.TextBox("year", Request["year"],new { @class = "", autocomplete = "off", placeholder = System.DateTime.Now.Year})
        @*<select id="year" name="year">
            @for (int i = 2016; i <= DateTime.Now.Year; i++)
            {
                <option @(year == i.ToString() ? "Selected" : "") value="@i">Năm @i</option>
            }
        </select>*@
        <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
        <input type="hidden" value="@Request["jsCallback"]" name="jsCallback" />
    </p>
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<div class="table-responsive" id="BCDoanhthu" style="margin-bottom:40px">
    <table id="cTable" class="table table-bordered">       
        <thead >          
            <tr>
                <th style="text-align:center">Mã khách hàng</th>
                <th style="text-align:center">Tên khách hàng</th>
                <th style="text-align:center">Số điện thoại</th>
                <th style="text-align:center">Năm</th>
                <th style="text-align:center">Tiền mua hàng </th>
                <th style="text-align:center">Tiền trả lại </th>
                <th style="text-align:center">Tổng mua </th>
                <th style="text-align:center">Điểm</th>
                <th style="text-align:center">Hạng</th>
                <th style="text-align:center">Xếp hạng cũ</th>
                <th style="text-align:center">Loại</th>
                <th style="text-align:center">Hoạt động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data)
            {
                <tr >
                    <td>@item.Code</td>
                    <td>@item.FirstName @item.LastName</td>
                    <td>@item.Phone</td>
                    <td>@item.NAM   </td>
                    <td>@CommonSatic.ToCurrencyStr( item.tienmuahang, null)</td>
                    <td>@CommonSatic.ToCurrencyStr( item.tientralai, null)</td>
                    <td>@CommonSatic.ToCurrencyStr(item.tongmua,null)
                    </td>
                    <td>@item.PlusPoint</td>
                    <td>@item.TenHang</td>
                    <td>@item.Idxephangcu</td>
                    <td>@item.loai</td>
                    @*<td>@item.loai</td>*@
                    <td><button name="ChangeStatus" value="ChangeStatus" onclick="location.href='@Url.Action("Change", "LogVip",new {area="Sale", CustomerId = item.CustomerId, NAM= item.NAM , tongmua = item.tongmua, PlusPoint= item.PlusPoint,TenHang=item.IdHang,Idxephangcu=item.Idxephangcu, loai=item.loai })';" type="submit" class="btn btn-mini btn-primary">Duyệt</button></td>
                </tr>
            }
        </tbody>       
    </table>
    @Html.PagedListPager(data, page => Url.Action("Search", "LogVip", new { page, branchId = Request["branchId"], year = Request["year"] }))
</div>
@section Scripts {
    <script type="text/javascript">
        $(function () {
            $('[data-rel=tooltip]').tooltip({ container: 'body' });

            $(window).keydown(function (e) {
                if (e.which == 113) {
                    e.preventDefault();
                    window.location = '@Url.Action("Create")';
                }
            });
        });
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })
        $(function () {
            $("#txtCode").focus().select();
            $('[data-rel=tooltip]').tooltip({ container: 'body' });
            $("#txtCode").click(function () {
                $("#txtCode").select();
            });
        });
    </script>

    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
}
