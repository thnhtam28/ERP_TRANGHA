@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Sale.Models

@model MaterialInboundViewModel

@{
    ViewBag.Title = Wording.PageView_MaterialInBound;

    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "MaterialInBound",
        ActionName = "Edit",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
    IEnumerable<SelectListItem> warehouseList = Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_Warehouse(null, Wording.Empty);
    IEnumerable<SelectListItem> supplierList = Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_Supplier(null, Wording.Empty);

}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
<link href="/assets/css/combojax.css" rel="stylesheet" />
<style>
    .has_error {
        border: 1px #f2a696 solid !important;
        color: #D68273;
    }

    .box {
        padding-top: 0px !important;
        padding-bottom: 0px !important;
        margin-top: 0px !important;
    }

    .popover {
        width: 100% !important;
    }

    .itemdiv > .body > .text {
        padding-bottom: 0px !important;
        /* padding-left: 7px; */
        /* font-size: 13px; */
    }

    .itemdiv {
        padding-right: 3px;
        min-height: 42px;
    }

        .itemdiv > .body > .name {
            color: black;
        }
</style>

}

<style>
    .lighter.block.green {
        display: none !important;
    }
</style>
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}

@using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Edit", "MaterialInBound", null, FormMethod.Post, new {id="MaterialInbound", @class = "form-horizontal clearfix" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.CreatedUserId)
    @Html.HiddenFor(model => model.CreatedDate)
    @Html.HiddenFor(model => model.IsDeleted)
    @Html.HiddenFor(model => model.IsArchive)
    @Html.HiddenFor(model => model.BranchId)
    @Html.HiddenFor(model => model.WarehouseDestinationId)
    @Html.HiddenFor(model => model.WarehouseSourceId)
    <div class="row">
        <div class="col-sm-7">
            <div class="product-search-box clearfix " style="margin-bottom:10px">
                <span class="label label-warning" style="padding: 6px; float: left; height: 26px;margin-left:0px">[F4]</span>
                <div id="product_search_control">
                    <span class="ctl">
                        @Html.TextBox("Material", "", new { placeholder = "Vật tư...", autocomplete = "off", style = "width:300px; margin-right:0px" })
                    </span>
                </div>
            </div>
            <div id="listOrderDetail" class="table-responsive top-10">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th style="width:5%">STT</th>
                            <th>Tên vật tư</th>
                            <th>Lô/Hạn SD</th>
                            <th style="width:10%">Số lượng</th>
                            <th style="width:15%">Đơn giá</th>
                            <th style="width:15%">Thành tiền</th>
                            <th style="width:50px;"></th>
                        </tr>
                    </thead>
                    <tbody class="detailList">
                        <tr role="0" hidden>
                            <td class="text-center">
                                1
                            </td>
                            <td>
                                <input class="item_id" type="hidden" id="DetailList_0__Id" name="DetailList[0].Id" value="0" />
                                <input class="item_material_id" type="hidden" id="DetailList_0__MaterialId" name="DetailList[0].MaterialId" value="0" />
                                <span class="item_material_name"></span>
                            </td>
                            <td class="detail_locode">
                                <input class="item_locode valid_null" type="text" id="DetailList_0__LoCode" name="DetailList[0].LoCode" value="" style="width:80px" />
                                <input class="input-mask-date item_expiry_date valid_null" type="text" id="DetailList_0__ExpiryDate" name="DetailList[0].ExpiryDate" value="" style="width:80px;">
                            </td>
                            <td>
                                <input type="hidden" name="DetailList[0].Unit" id="DetailList_0__Unit" value="" class="item_unit" />
                                <input class="item_quantity numberinput2 text-right" type="text" id="DetailList_0__Quantity" name="DetailList[0].Quantity" value="0" style="width:100%" />
                            </td>
                            <td>
                                <input class="item_price numberinput2 text-right" type="text" id="DetailList_0__Price" name="DetailList[0].Price" value="" style="width:100%" />
                            </td>
                            <td align="right"><span class="item_total" align="right"></span></td>
                            <td class="text-center">
                                <a class="btn-delete-item">
                                    <i class="ace-icon fa fa-trash red bigger-120" style="cursor:pointer"></i>
                                </a>
                            </td>
                        </tr>
                        @for (int i = 0; i < Model.DetailList.Count(); i++)
                        {
                            var thanh_tien=Model.DetailList[i].Price*Model.DetailList[i].Quantity;
                            <tr role="@(i+1)">
                                <td class="text-center">
                                    @(i+1)
                                </td>
                                <td>
                                    <input class="item_id" type="hidden" id="DetailList_@(i+1)__Id" name="DetailList[@(i+1)].Id" value="@Model.DetailList[i].Id" />
                                    <input class="item_material_id" type="hidden" id="DetailList_@(i+1)__MaterialId" name="DetailList[@(i+1)].MaterialId" value="@Model.DetailList[i].MaterialId" />
                                    <span class="item_material_name">@Model.DetailList[i].MaterialName</span>
                                </td>
                                <td class="detail_locode">
                                    <input class="item_locode" type="text" id="DetailList_@(i+1)__LoCode" name="DetailList[@(i+1)].LoCode" value="@Model.DetailList[i].LoCode" style="width:80px" />
                                    <input class="input-mask-date item_expiry_date" type="text" id="DetailList_@(i+1)__ExpiryDate" name="DetailList[@(i+1)].ExpiryDate" value="@(Model.DetailList[i].ExpiryDate.HasValue?Model.DetailList[i].ExpiryDate.Value.ToString("dd/MM/yyyy"):"")" style="width:80px;">
                                </td>
                                <td>
                                    <input type="hidden" name="DetailList[@(i+1)].Unit" id="DetailList_@(i+1)__Unit" value="@Model.DetailList[i].Unit" class="item_unit" />
                                    <input class="item_quantity numberinput2 text-right" type="text" id="DetailList_@(i+1)__Quantity" name="DetailList[@(i+1)].Quantity" value="@Model.DetailList[i].Quantity" style="width:100%" />
                                </td>
                                <td>
                                    <input class="item_price numberinput2 text-right" type="text" id="DetailList_@(i+1)__Price" name="DetailList[@(i+1)].Price" value="@Model.DetailList[i].Price" style="width:100%" />
                                </td>
                                <td align="right"><span class="item_total" align="right">@(thanh_tien.ToCurrencyStr(null))</span></td>
                                <td class="text-center">
                                    <a class="btn-delete-item">
                                        <i class="ace-icon fa fa-trash red bigger-120" style="cursor:pointer"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td id="TongSoLuong" align="right" style="font-weight:bold"></td>
                            <td></td>
                            <td id="TongThanhTien" align="right" style="font-weight:bold"></td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>

            </div>
        </div>
        <div class="col-sm-5">
            <div class="tabbable">
                <ul class="nav nav-tabs padding-12 tab-color-blue background-blue" id="tabCustomer">
                    <li class="active">
                        <a data-toggle="tab" href="#tab1">Phiếu nhập kho</a>
                    </li>

                </ul>

                <div class="tab-content">
                    <div id="tab1" class="tab-pane in active">
                        @Html.CustomDropDownListFor(model => model.WarehouseDestinationId, warehouseList, WidthType.span12, true)
                        @Html.CustomDropDownListFor(model => model.SupplierId, supplierList, WidthType.span12, true, "- chọn -")
                        @Html.CustomTextAreaFor(model => model.Note, null, WidthType.span12)
                    </div>

                </div>
            </div>

            <div class="widget-box top-10" id="widget-box-1">
                <div class="widget-header">
                    <h5 class="widget-title">Thanh toán</h5>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        @Html.CustomTextboxFor(model => model.TotalAmount, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 numberinput2" }, { "readonly", "readonly" } })
                    </div>
                </div>
            </div>
        </div>
    </div>
    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" id="Save" name="Save" value="Save">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </a>
    }
}
@section Scripts {
@Html.ScriptBottom_ValidationMvc()
@Html.ScriptBottom_ChosenStyle()
@Html.ScriptBottom_DatePicker("dd/MM/yyyy")
<script src="/Scripts/combojax.js?=vs1.011"></script>
<script type="text/javascript">
    $('.input-mask-date').mask('99/99/9999');
    //validation date
    var dtCh = "/";
    var minYear = 1900;
    var maxYear = 2100;

    function isInteger(s) {
        var i;
        for (i = 0; i < s.length; i++) {
            var c = s.charAt(i);
            if (((c < "0") || (c > "9"))) return false;
        }
        return true;
    }

    function stripCharsInBag(s, bag) {
        var i;
        var returnString = "";
        for (i = 0; i < s.length; i++) {
            var c = s.charAt(i);
            if (bag.indexOf(c) == -1) returnString += c;
        }
        return returnString;
    }

    function daysInFebruary(year) {
        return (((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) ? 29 : 28);
    }
    function DaysArray(n) {
        for (var i = 1; i <= n; i++) {
            this[i] = 31
            if (i == 4 || i == 6 || i == 9 || i == 11) { this[i] = 30 }
            if (i == 2) { this[i] = 29 }
        }
        return this
    }

    function isDate(dtStr) {
        debugger
        var daysInMonth = DaysArray(12);
        var pos1 = dtStr.indexOf(dtCh);
        var pos2 = dtStr.indexOf(dtCh, pos1 + 1);
        var strDay = dtStr.substring(0, pos1);
        var strMonth = dtStr.substring(pos1 + 1, pos2);
        var strYear = dtStr.substring(pos2 + 1);
        strYr = strYear;
        if (strDay.charAt(0) == "0" && strDay.length > 1)
            strDay = strDay.substring(1);
        if (strMonth.charAt(0) == "0" && strMonth.length > 1)
            strMonth = strMonth.substring(1);
        for (var i = 1; i <= 3; i++) {
            if (strYr.charAt(0) == "0" && strYr.length > 1)
                strYr = strYr.substring(1);
        }
        month = parseInt(strMonth);
        day = parseInt(strDay);
        year = parseInt(strYr);
        if (month < 1 || month > 12) {
            alert("Vui lòng nhập một tháng hợp lệ (dd/mm/yyyy)");
            HideLoading();
            return false;
        }
        if (day < 1 || day > 31 || (month == 2 && day > daysInFebruary(year)) || day > daysInMonth[month]) {
            alert("Vui lòng nhập một ngày hợp lệ (dd/mm/yyyy)");
            HideLoading();
            return false;
        }
        if (year < minYear || year > maxYear) {
            alert("Vui lòng nhập một năm hợp lệ có 4 chữ số từ " + minYear + " đến " + maxYear);
            HideLoading();
            return false;
        }
        if (dtStr.indexOf(dtCh, pos2 + 1) != -1 || isInteger(stripCharsInBag(dtStr, dtCh)) == false) {
            alert("Vui lòng nhập một ngày hợp lệ (dd/mm/yyyy)");
            HideLoading();
            return false;
        }
    }
    //-----
    $(document).ready(function () {
        LoadNumberInput();
        calcTotalAmount();
        $('#listOrderDetail').on('change', 'input', function () {
            var value = $(this).val();
            if (value == "") {
                $(this).addClass("valid_null");
            }
            else {
                $(this).removeClass("valid_null");
                $(this).removeClass("has_error");

            }
        });
        $('#Save').click(function () {
            ShowLoading();
            debugger
            var dt = document.getElementsByClassName("input-mask-date");
            for (let i = 0; i < dt.length; i++) {
                if (isDate(dt[i].value) == false) {
                    HideLoading();
                    return false;
                }
            }
            // parseValidatorForm("#CreateProductInBound");
            var WarehouseDestinationId = $("#WarehouseDestinationId").val();
            var SupplierId = $("#SupplierId option:selected").val();
            var messagge = "";
            var count_locode = $('.item_locode.valid_null').length;
            var expiry_date_null = $('.item_expiry_date.valid_null').length;
            $('.valid_null').addClass("has_error");
            if (count_locode > 1) {
                messagge += "Cần nhập đầy đủ số lô <br>";
            }
            if (expiry_date_null > 1) {
                messagge += "Cần nhập đầy đủ hạn sử dụng <br>";
            }
            if (WarehouseDestinationId == '') {
                messagge += "Kho nhận chưa có <br>";
            }
            //if (SupplierId == '') {
            //    messagge += "Nhà cung cấp chưa có <br>";
            //}
            if (messagge != '') {
                alertPopup('Lỗi!', messagge, 'error');
                HideLoading();
            }
            else {
                ClearFormatBeforeSubmit($("#MaterialInbound"));
                $("#MaterialInbound").submit();
                // HideLoading();
            }

            //return false;
        });
    });
    $(window).keydown(function (e) {
        if (e.which == 115) {
            e.preventDefault();
            $("#Material").focus();
        }
    });
</script>
<script src="/Scripts/area_sale/MaterialInbound.js?=vs1.1"></script>
}
