<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.7.1/js/bootstrap-datepicker.min.js"></script>

@model IEnumerable<InquiryCardViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Sale.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = Wording.PageIndex_InquiryCard;
        bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
        if (isPopup)
        {
            Layout = "~/Views/Shared/_PopupLayout.cshtml";
        }
        else
        {
            Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        }

        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "InquiryCard",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = true,
            IsPopup = false,
            DisplayBackButton = false
        };
        string Status = (Request["Status"] == null || Request["Status"] == "1") ? "1" : "0";
        string type = (Request["type"] == null || Request["type"] == "SkinScan") ? "SkinScan" : "CheckingHair";
        int rowNumber = 0;
        int numberOfItem = 30;
        int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;


        DateTime aDateTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        // Cộng thêm 1 tháng và trừ đi một ngày.
        DateTime retDateTime = aDateTime.AddMonths(1).AddDays(-1);


    }

    <link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
    @section HeadOfPage {
        @Html.ScriptTop_ChosenStyle()
    }
    <style>
        #type_chosen {
            height: 28px !important;
            float: left;
            width: 250px !important;
        }

        #type_chosen .chosen-single {
            width: 100%;
            height: 28px !important;
        }

        .chzn-select {
            display: inline-block !important;
        }
    </style>
    @helper GridColumnCommand(int id)
    {
        <p>
            <a class="btn btn-mini btn-success" onclick="OpenPopup('@Url.Action("Edit", "InquiryCard", new { Id = id, IsPopup = true })', '@Wording.PageEdit_InquiryCard', 0, 0)"><i class="fa fa-edit"></i></a>
            <button name="Delete" id="Delete" value="@id" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>

        </p>
    }

    @helper GridColumnName(string name, string note, int id, bool isPopup)
    {
        if (isPopup)
        {
            <a onclick="parent.selectBranchItem(@id)">@name</a>
        }
        else
        {
            name = string.IsNullOrEmpty(name) ? "No Title" : name;
            <a href="@Url.Action("Detail", "InquiryCard", new { Id = id })">@name</a>

            if (!string.IsNullOrEmpty(note))
            {
                <span class="help-button" data-rel="tooltip" data-placement="bottom" data-original-title="@note">?</span>
            }
        }
    }

    @helper GridColumnCategoryValue(object value)
    {
        var attr = Common.GetCategoryByValueOrId("value", value);
        <span>@(attr != null ? attr.Name : "")</span>
    }

    @helper CheckDeleteColumns(int Id)
    {
        <label>
            <input class="ace class-delete-all" type="checkbox" id="DeleteId-checkbox" name="DeleteId-checkbox" value="@Id">
            <span class="lbl"></span>
        </label>
    }

    @helper BuildCheckAll()
    {
        <label>
            <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
            <span class="lbl"></span>
        </label>
    }
    @helper GridColumnStatusName(string status)
    {
        switch (status)
        {
            case "SkinScan":
                <span class="label label-info">@Wording.AdviseType_SkinScan</span>
                break;
            case "CheckingHair":
                <span class="label label-warning">@Wording.AdviseType_CheckingHair</span>
                break;

        }
    }
    @using (Html.BeginPageHeaderContainer(pageSetting))
    {
        <p>
            <span class="input-daterange input-group">
                @Html.TextBox("startDate", Request["startDate"] != null ? Request["startDate"] : aDateTime.ToString("dd/MM/yyyy"), new { @class = "", autocomplete = "off", placeholder = "Từ ngày..." })
                <span class="input-group-addon">
                    <i class="fa fa-exchange"></i>
                </span>
                @Html.TextBox("endDate", Request["endDate"] != null ? Request["endDate"] : retDateTime.ToString("dd/MM/yyyy"), new { @class = "", autocomplete = "off", placeholder = "Đến ngày..." })
            </span>
            @Html.TextBox("txtCode", Request["txtCode"], new { @class = "", autocomplete = "off", placeholder = "Mã phiếu PYC..." })
            @*@Html.TextBox("txtCusCode", Request["txtCusCode"], new { @class = "", autocomplete = "off", placeholder = "Mã KH..." })
                @Html.TextBox("txtCusName", Request["txtCusName"], new { @class = "", autocomplete = "off", placeholder = "Tên KH..." })*@
            @Html.TextBox("txtCusInfo", Request["txtCusInfo"], new { @class = "", autocomplete = "off", placeholder = "Mã hoặc Tên KH..." })
            @Html.TextBox("TargetCode", Request["TargetCode"], new { @class = "", autocomplete = "off", placeholder = "Mã tư vấn/MBS..." })
            @Html.TextBox("productCode", Request["productCode"], new { @class = "", autocomplete = "off", placeholder = "Mã liệu trình..." })
        </p>
        <script>

            $('.input-daterange').datepicker({ format: 'dd/mm/yyyy' }).on('changeDate', function (e) {

            });
        </script>
        <p>
            @*<select id="Status" name="Status">
                    <option value="1" @(Status == "1" ? "selected" : "")>Đã lập phiếu YC</option>
                    <option value="0" @(Status == "0" ? "selected" : "")>Chưa lập phiếu YC</option>
                </select>*@

            @Html.DropDownList("type", Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_Category("TemplateListVote", type, null), new { @class = "chzn-select", style = "width:250px !important; float:left" })
            @*@Html.DropDownList("BranchId", SelectListHelper.GetSelectList_Branch(Request["BranchId"], "Chi nhánh"), new { @class = "chzn-select", style = "width:250px !important; float:left" })*@
            @Html.DropDownList("ManagerId", SelectListHelper.GetSelectList_User(Request["ManagerId"], "Người quản lý"), new { @class = "chzn-select", style = "width:250px !important; float:left" })
            @Html.DropDownList("CreateUserId", SelectListHelper.GetSelectList_User(Request["CreateUserId"], "Người lập phiếu"), new { @class = "chzn-select", style = "width:250px !important; float:left" })
        </p>
    }

    @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }

    @if (!isPopup)
    {
        using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
        {
            <div class="table table-responsive">
                @Html.Grid(Model).Columns(columns =>
                {
                    columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
                    {
                        rowNumber++;

                        return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
                    });
                    columns.Add().Titled(Wording.InquiryType).SetWidth(100).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnStatusName(u.Type));
                    columns.Add().Titled(Wording.InquiryCode).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Note, u.Id, isPopup));
                    columns.Add(u => u.TargetCode).Titled(Wording.MaChungTu).RenderValueAs(u => u.TargetCode);
                    columns.Add(u => u.CustomerCode).Titled(Wording.CustomerCode).RenderValueAs(u => u.CustomerCode);
                    columns.Add(u => u.CustomerName).Titled(Wording.CustomerName).RenderValueAs(u => u.CustomerName);
                    columns.Add(u => u.ManagerName).Titled(Wording.ManagerStaff).RenderValueAs(u => u.ManagerName);
                    columns.Add(u => u.CounselorName).Titled(Wording.CounselorName).RenderValueAs(u => u.CounselorName);
                    columns.Add(u => u.SkinscanUserName).Titled(Wording.SkinscanUser).RenderValueAs(u => u.SkinscanUserName);
                    columns.Add(u => u.CreateUserName).Titled(Wording.CreateStaffName).RenderValueAs(u => u.CreateUserName);
                    columns.Add(u => u.WorkDay).Titled(Wording.WorkDay).SetWidth(100).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
                    columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(100).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
                    //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
                    columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(100).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
                    //columns.Add(u => u.IsActived).Titled("Lập phiếu YC").Sanitized(false).Encoded(false).RenderValueAs(n => (n.IsActived ? "<span style=\"color:green\"><b>Đã lập phiếu YC</b></span>" : "<span style=\"color:red\"><b>Chưa lập phiếu YC</b></span>")).Sortable(true);
                    columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
                    }).WithPaging(30)
            </div>
            using (Html.BeginButtonContainer(pageSetting))
            {
                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", pageSetting.ModuleName, "Sale"))
                {
                    @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Primary, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { onclick = "OpenPopup('" + Url.Action("Create", pageSetting.ModuleName, new { IsPopup = true }) + "&TargetModule=AdviseCard', '', 0, 0)" })
                }

            }
        }
    }
    else
    {
        @Html.Grid(Model).Columns(columns =>
        {
            //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Code).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Note, u.Id, isPopup));
        }).WithPaging(30)
    }

    @section Scripts {
        @Html.ScriptBottom_ValidationMvc()
        @Html.ScriptBottom_ChosenStyle()
        @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
        <script type="text/javascript">
            function CheckIsval() {
                if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                    alert("Phải chọn ít nhất 1 item.");
                    return false;
                }
                else {
                    if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }

            $('[name="Delete"]').click(function () {
                if (confirm('Bạn có chắc muốn xóa item ?')) {
                    $(this).closest('tr').children('td').each(function (i, e) {
                        $(this).find("input.class-delete-all").prop("checked", true);
                        return true;
                    })
                }
                else {
                    return false;
                }

            })

        </script>

    }
