@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Sale.Models

@model ProductOutboundTransferViewModel

@{
    ViewBag.Title = "Cập nhật xuất kho";

    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "ProductOutBound",
        ActionName = "Edit",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
    IEnumerable<ProductViewModel> productList = (IEnumerable<ProductViewModel>)ViewBag.productList;
    IEnumerable<SelectListItem> productCategoryList = Erp.BackOffice.Helpers.Common.GetSelectList_Category("product", null, "value");

}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
}
<style>
    .edit-view .control-group, .edit-view .form-group {
        border-top: 1px solid #dedede !important;
    }
</style>
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}

@using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Edit", "ProductOutBound", null, FormMethod.Post, new { id = "EditProductOutBound", @class = "form-horizontal clearfix" }))
{
    @Html.ValidationSummary(true)
    <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.WarehouseSourceId)
    <div class="row">
        <div class="col-sm-7">
            @if (Model.WarehouseSourceId != null && Model.WarehouseSourceId > 0)
            {
                <div class="product-search-box top-10">
                    <input id="product_barcode" type="text" placeholder="Mã sản phẩm..." autocomplete="off" style="width:200px"/>
                    <select id="productSelectList" name="productSelectList" style="width:400px">
                        <option value="">- Tìm sản phẩm -</option>
                        @foreach (var item in productList.OrderBy(x => x.Name))
                        {
                            <option value="@item.Id" data-selected="0" data-value="@item.Id | @(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(item.Image_Name, "product-image-folder", "product")) | @(item.Code + " - " + item.Name + " (Tồn kho: " + Common.PhanCachHangNgan2(item.QuantityTotalInventory) + ")")" data-code="@item.Code" data-barcode="@item.Barcode" data-product-type="@item.CategoryCode" data-price="@(item.PriceOutbound)" data-unit="@item.Unit" data-quantity-inventory="@item.QuantityTotalInventory.Value">@item.Name</option>
                        }
                    </select>
                </div>

                <div id="listOrderDetail" class="table-responsive top-10">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th style="width:5%">STT</th>
                                <th>Tên sản phẩm</th>
                                <th>Lô/Hạn SD</th>
                                <th style="width:10%">Số lượng</th>
                                <th style="width:15%">Đơn giá</th>
                                <th style="width:15%">Thành tiền</th>
                                <th style="width:50px;"></th>
                            </tr>
                        </thead>
                        <tbody class="detailList">
                            @if (Model.DetailList.Count > 0)
                            {
                                foreach (var item in Model.DetailList)
                                {
                                    @Html.Partial("LoadProductItem", item);
                                }
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td>
                                    <input style="width:30px;" autocomplete="off" data-val="true" data-val-number="The field Sản phẩm đã chọn must be a number." data-val-required="Bắt buộc nhập" id="ProductItemCount" maskformat="" name="ProductItemCount" placeholder="" type="text" value="" readonly="readonly" />
                                </td>
                                <td></td>
                                <td></td>
                                <td id="TongSoLuong" align="right" style="font-weight:bold"></td>
                                <td></td>
                                <td id="TongThanhTien" align="right" style="font-weight:bold"></td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                    <span style="color:red" class="field-validation-valid help-inline" data-valmsg-for="ProductItemCount" data-valmsg-replace="true"></span>
                </div>
            }
        </div>
        <div class="col-sm-5">
            <div class="widget-box" id="widget-box-1">
                <div class="widget-header">
                    <h5 class="widget-title">Thông tin khởi tạo</h5>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        <div class="detail-view">
                            <div class="row control-group">
                                @Html.DetailViewItemFor2(m => m.WarehouseSourceName, true, null, null, "col-xs-4", "col-xs-8")
                            </div>
                                @if(!string.IsNullOrEmpty(Model.InvoiceCode))
                                {
                            <div class="row control-group">
                                <div class="col-xs-4 control-label"><label for="InvoiceCode">Mã hóa đơn bán hàng</label></div><div class="col-xs-8 control-value" style=""><a href="/ProductInvoice/Detail/?TransactionCode=@Model.InvoiceCode" target="_blank">@Model.InvoiceCode</a></div>
                            </div>
                                }

                            @if(!string.IsNullOrEmpty(Model.WarehouseDestinationName))
                            { 
                            <div class="row control-group">
                                @Html.DetailViewItemFor2(m => m.WarehouseDestinationName, null, null, "col-xs-4", "col-xs-8")
                            </div>
                            }
                        </div>
                        @Html.CustomTextAreaFor(model => model.Note, null, WidthType.span12)
                        @Html.CustomTextboxFor(model => model.TotalAmount, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 numberinput2" }, { "disabled", "disabled" } })
                        @*@Html.ModulePopupFor(m => m.CreatedStaffId, "Staffs", Model.CreatedStaffName, false, false, false, null, null, "Search")*@
                    </div>
                </div>
            </div>
        </div>
    </div>

    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" id="Save" name="Save" value="Save">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </a>
    }
}

@section Scripts {

    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")

    <link href="/Scripts/RadCombobox_v1/RadComboBoxLite.css" rel="stylesheet" />
    <script src="/Scripts/RadCombobox_v1/rabCombobox.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            LoadNumberInput();
            calcTotalAmount();
            $('#ProductItemCount').val($('#listOrderDetail .detailList tr.detail_item').length);
            $('#Save').click(function () {
                ShowLoading();
                ClearFormatBeforeSubmit($("#EditProductOutBound"));
                $("#EditProductOutBound").submit();
              //  HideLoading();

                //return false;
            });
            //init rcb chọn sản phẩm
            $('#productSelectList').radComboBox({
                colTitle: 'ID, Hình, Tên sản phẩm',
                colValue: 1,
                colImage: 2,
                colHide: '1',
                colSize: '0px,50px,',
                colClass: ',,',
                //width: 600,
                height: 300,
                boxSearch: true,
                colSearch: 2
            });

            //$('#TotalAmount').numberFormat();
            //$('.detail_item_price').numberFormat('before');
            //$('#PaymentViewModel_Amount').val('0').numberFormat();
            $("#ProductItemCount").attr("readonly", "true");

            //Hiển thị giá và tính thành tiền khi chọn sản phẩm
            $('#productSelectList').on('change', function () {
                var $this = $(this);
                var selected = $this.find("option:selected");

                if (selected.val() == '' || $('#product_item_' + selected.val()).length > 0)
                    return;

                var OrderNo = $('.detailList tr.detail_item').length;
                var ProductId = selected.val();
                var ProductName = selected.text();
                var Unit = selected.data("unit");
                var Quantity = 1;
                var Price = selected.data("price");
                var ProductType = selected.data("product-type");
                var ProductCode = selected.data("code");
                var QuantityInventory = selected.data("quantity-inventory");
                var WarehouseId = $("#WarehouseSourceId").val();

                var formdata = {
                    OrderNo: OrderNo,
                    ProductId: ProductId,
                    ProductName: ProductName,
                    Unit: Unit,
                    Quantity: Quantity,
                    Price: Price,
                    ProductType: ProductType,
                    ProductCode: ProductCode,
                    QuantityInventory: QuantityInventory,
                    WarehouseId: WarehouseId
                };
                //Cộng dồn khi chọn sản phẩm cùng loại
                $("#listOrderDetail tbody tr").each(function () {
                    //debugger
                    var row = $(this);
                    var w = $(window);
                    //$(this).removeClass('selected_grey').addClass("text_data");
                    var ProductCode1 = $(this).closest('tr').find("td:eq(1) input").val();
                    //var z = $(this).closest('tr');
                    //var x = $(this).closest('tr').find("td:eq(3) input:nth-child(2)");
                    //var y = parseInt(x.val())+1;
                    //var h = $(this).closest('tr').find("td:eq(3) input:nth-child(2)").val(parseInt($(this).closest('tr').find("td:eq(3) input:nth-child(2)").val()) + 1);
                    //alert($('#product_barcode3').val());
                    if (ProductId == ProductCode1) {
                        //alert(ProductId);
                        $(this).closest('tr').find("td:eq(3) input:nth-child(2)").val(  parseInt(   $(this).closest('tr').find("td:eq(3) input:nth-child(2)").val()     ) + 1   );
                        $(this).closest('tr').find("td:eq(3) input:nth-child(2)").trigger('change');
                        //$(this).addClass('selected_grey');
                        //var body = $("html,#listOrderDetail");
                        //body.stop().animate({ scrollTop: row.offset().top - (w.height() / 1.6) }, 500, 'swing', function () {
                           // row.addClass('scrollCode');
                        //});
                        formdata = {};
                        return;
                    } else {
                        //$(this).removeClass("scrollCode");
                    }
                    //alert(ProductId);

                });
                //Thêm dòng mới
                ClickEventHandler(true, "/ProductOutBound/LoadProductItem", ".detailList", formdata, function () {
                    $('#ProductItemCount').val($('#listOrderDetail .detailList tr.detail_item').length);
                    LoadNumberInput();
                    calcTotalAmount();
                });
            });

            $('#listOrderDetail').on('focus', '.detail_item_price', function () {
                $(this).select();
            });

            $('#listOrderDetail').on('focus', '.detail_item_qty', function () {
                $(this).select();
            });

            // tính thành tiền và tổng cộng
            $('#listOrderDetail').on('change', '.detail_item_qty', function () {
                $(this).val($(this).val().replace(/\-/g, ''));
                $(this).val($(this).val().replace(/[^0-9.,]/g, ''));
                var ralVal = numeral($(this).val());
                if (ralVal <= 0) {
                    $(this).val(1);
                }
                var $this = $(this);
                var id = $this.closest('tr').data('id');
                if ($(this).val() > $(this).data("quantity-inventory")) {
                    $(this).val($(this).data("quantity-inventory"));
                }
                //tính tổng cộng
                calcAmountItem(id);
                calcTotalAmount();
            });

            $('#listOrderDetail').on('change', '.detail-product-price .detail_item_price:not(.mask-format-currency)', function () {
                debugger
                $(this).val($(this).val().replace(/\-/g, ''));
                $(this).val($(this).val().replace(/[^0-9.,]/g, ''));
                var ralVal = numeral($(this).val());
                if (ralVal <= 0) {
                    $(this).val(1);
                }
                var $this = $(this);
                var id = $this.closest('tr').data('id');
                calcAmountItem(id, 'price');
                calcTotalAmount();
            });

            $('#listOrderDetail').on('keypress', '.detail-product-price, .detail_item_qty', function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                }
            });

            $('#product_barcode').keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                    $('#product_barcode').trigger('change');
                }
            });

            //khi nhập barcode
            $('#product_barcode').change(function () {
                var $this = $(this);
                if ($this.val() != '') {

                    var barcode = $this.val();
                    //đặt lại giá trị rỗng
                    $this.val('').focus();

                    var valueSearch = searchProductByBarCodeContain(barcode);
                    if (valueSearch == undefined) {
                        alert('Không tìm thấy sản phẩm với mã code trên!');
                        return;
                    }

                    $('#productSelectList').val(valueSearch).trigger("change");
                }
            });

            // xóa sản phẩm
            $('#listOrderDetail').on('click', '.btn-delete-item', function () {
                //$(this).closest('tr').next('tr.template_location').remove();
                $(this).closest('tr').remove();

                var countItem = $('.detailList tr.detail_item').length;
                $('#ProductItemCount').val(countItem);

                if (countItem == 0) {
                    $('#ProductItemCount').val('');
                    $('#TongSoLuong').text('');
                    $('#TongThanhTien').text('');
                }
                calcTotalAmount();

                $('.detailList tr.detail_item').each(function (index, tr) {
                    $(tr).attr('data-id', index);
                    $(tr).attr('id', "product_item_" + index);
                    $(tr).attr('role', index).attr("id", "product_item_" + index).data("id", index);
                    $(tr).find('td:first-child').text(index + 1);

                    $(tr).find('.detail_item_id input').attr('name', 'DetailList[' + index + '].ProductId').attr('id', 'DetailList_' + index + '_ProductId');
                    $(tr).find('.detail-locode input').attr('name', 'DetailList[' + index + '].ExpiryDate').attr('id', 'DetailList_' + index + '__ExpiryDate');
                    $(tr).find('.detail-locode input').attr('name', 'DetailList[' + index + '].LoCode').attr('id', 'DetailList_' + index + '__LoCode');
                    $(tr).find('.detail_item_qty').attr('name', 'DetailList[' + index + '].Quantity').attr('id', 'DetailList_' + index + '_Quantity');
                    $(tr).find('.detail_item_price').filter(':not(.mask-format-currency)').attr('name', 'DetailList[' + index + '].Price').attr('id', 'DetailList_' + index + '__Price');
                    $(tr).find('.detail_item_unit').attr('name', 'DetailList[' + index + '].Unit');
                });
            });
        });

        function selectLocationItem(id, LoCode, Floor, ExpiryDate, Shelf, SN, orderNo) {
            $("#LocationItemList_" + orderNo + "__Id").val(id);
            $("#LocationItemList_" + orderNo + "__SN").val(SN);
            $("#LocationItemList_" + orderNo + "__Shelf").val(Shelf);
            $("#LocationItemList_" + orderNo + "__Floor").val(Floor);
            $("#LocationItemList_" + orderNo + "__LoCode").val(LoCode);
            $("#LocationItemList_" + orderNo + "__ExpiryDate").val(ExpiryDate);
            ClosePopup();
        }

        function searchProductByBarCodeContain(barcode) {
            barcode = barcode.toLowerCase();
            //var $productSelect = $('.detail_item_id').first();

            var $optionList = $("#productSelectList").find('option');

            var arrResulft = [];
            for (var i = 0; i < $optionList.length; i++) {
                var data_code = $($optionList[i]).data('code') != undefined ? $($optionList[i]).data('code').toString().toLowerCase() : undefined;
                if (barcode.indexOf(data_code) != -1)
                    arrResulft.push($($optionList[i]).attr('value'));

                if (arrResulft.length == 1) {
                    return arrResulft[0];
                }
            }

            return arrResulft[0];
        };

        function calcAmountItem(id, priceFrom) {
            debugger
            var input_price = $('#DetailList_' + id + '__Price');
            var _price = input_price.val() != '' ? removeComma(input_price.val()) : 0;
            var $qty = $('tr#product_item_' + id).find('.detail_item_qty');
            var qty = 1;
            //var a = $qty.val
            if ($qty.val() == '') {
                $qty.val(1);
            } else {
                qty = parseInt($qty.val()) < 0 ? parseInt($qty.val()) * -1 : parseInt($qty.val());
            }
            var total = parseFloat(_price) * qty;
            $('tr#product_item_' + id).find('.detail_item_total').text(numeral(total).format('0,0'));
        };

        function calcTotalAmount() {
            debugger
            var total = 0;
            var total1 = 0;

            var selector = '.detailList tr.detail_item.detail_item';
            $(selector).each(function (index, elem) {
                if ($(elem).find('.detail_item_total').text() != '') { // la số thì mới tính
                    total += parseFloat(removeComma($(elem).find('.detail_item_total').text()));
                    $('#TongThanhTien').text(numeral(total).format('0,0'));
                }
                console.log($(elem).find('.detail_item_qty').val());
                if ($(elem).find('.detail_item_qty').val() != '') { // la số thì mới tính
                    total1 += parseInt($(elem).find('.detail_item_qty').val().replace(/\./g, ''));
                    $("#TongSoLuong").text(currencyFormat(total1));
                }

                if (index == $(selector).length - 1) {
                    $('#mask-TotalAmount').val(numeral(total).format('0,0'));
                    $('#TotalAmount').val(numeral(total).format('0,0'));
                }
            });
        };

        function checkChosenProductOnTable() {
            var flag = true;
            if ($('#PurchaseOrderId').val() == '') {
                $('.detailList select.detail_item_id').each(function (index, elem) {
                    if ($(elem).val() == '') {
                        var message = $(elem).data('val-required') != undefined ? $(elem).data('val-required') : 'Chưa chọn sản phẩm!';
                        $(elem).next('span').text(message);
                        flag = false;
                    }
                });
            }
            return flag;
        }

        //hàm gọi lại từ form tạo mới phiếu nhập
        function ClosePopupAndAppendSelectPurchaseOrder(optionSelect) {
            ClosePopup(false);
            $('#PurchaseOrderId').append($(optionSelect)).trigger("chosen:updated");
        }

        function parseValidatorForm(form) {
            //jQuery.noConflict();

            // if the form is in a dialog box {
            var form = $(form);
            form.removeData('validator').removeData('nobtrusiveValidation');
            $.validator.unobtrusive.parse(form); // }

            $.fn.extend({
                // form validation {
                isValid: function () {
                    var self = $(this);
                    $.validator.unobtrusive.parse(self);
                    return self.data('unobtrusiveValidation').validate();
                } // }
            });
        };

    </script>
}
