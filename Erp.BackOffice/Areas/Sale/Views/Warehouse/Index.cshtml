@model IEnumerable<WarehouseViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_Warehouse;
    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Warehouse",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Warehouse", "Sale"))
            {
                <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                </button>
            }
        </p>
    </div>
}

@helper GridColumnName(string name, int id)
{
    name = string.IsNullOrEmpty(name) ? ">No Title" : name;
    <a href="@Url.Action("Edit", "Warehouse", new { Id = id })">@name</a>
    @*<a href="javascript:;" onclick="OpenPopup('@Url.Action("Edit", "Warehouse", new { Id = id, IsPopup = "true" })', 'Xem chi tiết kho hàng', 1000, 500)">@name</a>*@
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl" title="" ></span>
    </label>
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @*@Html.TextBox("txtCode", Request["txtCode"], new { autocomplete = "off", placeholder = "Nhập mã kho..." })
        @Html.TextBox("txtSearch", Request["txtSearch"], new { autocomplete = "off", placeholder = "Nhập tên kho..." })*@
        @Html.TextBox("txtSearch", Request["txtSearch"], new { autocomplete = "off", placeholder = "Nhập mã kho hoặc tên kho..." })
        @Html.TextBox("txtAddress", Request["txtAddress"], new { autocomplete = "off", placeholder = "Nhập địa chỉ..." })
    </p>
}

@using (Html.BeginForm("Delete", "Warehouse", FormMethod.Post))
{

    @Html.Grid(Model).Columns(columns =>
           {
               columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
               columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id));
               columns.Add(u => u.BranchName).Titled(Wording.BranchName);
               columns.Add(u => u.Code).Titled(Wording.Code).SetWidth(100);
               columns.Add(u => u.Address).Titled(Wording.Address).SetWidth(200);
               columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(100);
               //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
               columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(100).Sortable(true);
               columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
           }).WithPaging(10)
    using (Html.BeginButtonContainer(pageSetting))
    {
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "Warehouse", "Sale"))
        {
            <a class="btn btn-mini btn-primary" href="@Url.Action("Create", pageSetting.ModuleName)">
                <i class="ace-icon fa fa-plus"></i>
                @Wording.CreateNew
            </a>
        }
        
        //Nút xuất file excel
        <button class="btn btn-white btn-success btn-sm" type="button" value="Export" onclick="GetPrint(true)">
            <i class="ace-icon fa fa-file-excel-o"></i>Xuất excel
        </button>
        
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Warehouse", "Sale"))
        {
            <button class="btn btn-mini btn-danger" type="submit" name="DeleteAll" value="DeleteAll" onclick="return CheckIsval();">
                <i class="ace-icon fa fa-trash"></i>
                @Wording.Delete
            </button>
        }
    }
}

@section Scripts {
    <script type="text/javascript">

        function GetPrint(type) {
            var txtSearch = $('#txtSearch').val();
            var txtAddress = $('#txtAddress').val();

            OpenPopup('/Warehouse/PrintWarehouse?txtSearch=' + txtSearch + '&txtAddress=' + txtAddress + '&ExportExcel=' + type + '&IsPopup=true', '', 0, 900);

            setTimeout(function () {
                $("#myModal .modal-body .iframe-container").html("");
                $('#myModal').modal('hide');
            }, 200000);
            HideLoading();
        };

        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

        $('.grid-header').mouseover(function () {
            $('.grid-header')[0].title = "Chọn tất cả";
        });

        $('.class-delete-all').on('click', function () {
            if ($('.class-delete-all:checked').length == $('.class-delete-all').length) {
                $('#checkAll').prop('checked', true);
            } else {
                $('#checkAll').prop('checked', false);
            }
        });
    </script>
}