@model IQueryable<ObjectAttributeViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_ObjectAttribute;
    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        </p>
    </div>
}

@helper GridColumnName(string name, int id)
{
    name = string.IsNullOrEmpty(name) == true ? "No title" : name ;
    <a href="@Url.Action("Edit", "ObjectAttribute", new { Id = id })">@name</a>
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "" )</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

<div class="page-header">
    <h1>
        @ViewBag.Title
        @*<small><i class="ace-icon fa fa-angle-double-right"></i>...</small>*@
    </h1>
</div>

@using (Html.BeginForm("Delete", "ObjectAttribute", FormMethod.Post))
{
    <p>
        @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Info, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { @href = Url.Action("Create", "ObjectAttribute") })
        <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
            <i class="ace-icon fa fa-trash bigger-120"></i>
            @Wording.Delete
        </button>
    </p>

    @Html.Grid(Model).Columns(columns =>
           {
               columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
               columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id));
               columns.Add(u => u.DataType).Titled(Wording.DataType).SetWidth(150).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCategoryValue(u.DataType));
               columns.Add(u => u.IsSelected).Titled(Wording.IsSelected).SetWidth(70).RenderValueAs(u => (u.IsSelected == true ? Wording.Selected : Wording.NoneSelect));
               columns.Add(u => u.ModuleType).Titled(Wording.ModuleType).SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCategoryValue(u.ModuleType));
               columns.Add(u => u.ModuleCategoryType).Titled(Wording.ModuleCategoryType).SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCategoryValue(u.ModuleCategoryType));
               columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(100);
               //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
               columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(100).Sortable(true);
               columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
           }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>
}