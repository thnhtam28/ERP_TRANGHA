@model IEnumerable<ProductInvoiceViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_ProductInvoice;
    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "ProductInvoice",
        ActionName = "DetailByChart",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = false
    };
    var TotalAmount = Model.Sum(n => n.TotalAmount);
    var PaidAmount = Model.Sum(n => n.PaidAmount);
    var RemainingAmount = Model.Sum(n => n.RemainingAmount);
}

<style type="text/css">
    .product-invoice-isdeleted {
        text-decoration: line-through;
    }
</style>

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

@helper GridColumnCommand(int id)
{
    @*<a onclick="printInvoice(@id)" class="btn btn-primary btn-mini"><i class="fa fa-print"></i></a>*@

    <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
        <i class="ace-icon fa fa-trash"></i>
    </button>
}

@helper GridColumnName(string name, int id, string note, string reason)
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
    <a href="@Url.Action("Detail", "ProductInvoice", new { Id = id, IsPopup = true })">@name</a>

    if (!string.IsNullOrEmpty(note) || !string.IsNullOrEmpty(reason))
    {
        note = note + "; " + reason;
        <span class="help-button" data-rel="tooltip" data-placement="bottom" data-html="true" data-original-title="@note">?</span>
    }
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@helper GridColumnStatusName(string status)
{
    switch (status)
    {
        case "pending":
            <span class="label label-info">@Wording.OrderStatusDisplay_pending</span>
            break;
        case "inprogress":
        <span class="label label-warning">@Wording.OrderStatusDisplay_inprogress</span>
            break;
        case "shipping":
        <span class="label label-warning">@Wording.OrderStatusDisplay_shipping</span>
            break;
        case "complete":
        <span class="label label-success">@Wording.OrderStatusDisplay_complete</span>
            break;
        case "delete":
        <span class="label label-danger">@Wording.OrderStatusDisplay_delete</span>
            break;
    }
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

    <div class="col-sm-12">
        <h4 class="green">
         
            @*<a class="btn btn-sm btn-white btn-primary pull-right red" >
                <b>Tổng doanh thu: @CommonSatic.ToCurrencyStr(TotalAmount,null) đ</b>
                <b>Tổng tiền đã thu: @CommonSatic.ToCurrencyStr(PaidAmount, null) đ</b>
                <b>Tổng tiền chưa thu: @CommonSatic.ToCurrencyStr(RemainingAmount, null) đ</b>
            </a>*@
        </h4>
        
    </div>
    
    <div class="table-responsive col-sm-12 bottom-20">
        @Html.Grid(Model).Columns(columns =>
    {
        int index = 1;
        columns.Add().Titled("STT").SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(n => (index++).ToString());
        columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
        columns.Add().Titled(Wording.BranchName).RenderValueAs(n => n.BranchName);
        columns.Add().Titled("Mã đơn hàng").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id, u.Note, u.CancelReason)).SetWidth(140);
        columns.Add().Titled(Wording.Customer).RenderValueAs(n => n.CustomerName);
        columns.Add().Titled(Wording.Phone).RenderValueAs(n => n.CustomerPhone);
        //columns.Add().Titled("CT xuất kho").Sanitized(false).Encoded(false).RenderValueAs(n => string.Format("<a href=\"/ProductOutbound/Detail/{0}\" target=\"_blank\">{1}</a>", n.ProductOutboundId, n.ProductOutboundCode)).SetWidth(120);
        //columns.Add().Titled(Wording.TotalFixedDiscount).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.FixedDiscount, null)).Css("text-right");
        columns.Add().Titled(Wording.DiscountAmount).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.DiscountAmount, null)).Css("text-right");
        columns.Add(u => u.TotalAmount).Titled("Doanh số").Sortable(true).SetWidth(100).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.TotalAmount,null)).Css("text-right");
        //columns.Add(u => u.PaidAmount).Titled(Wording.PaidAmount).Sortable(true).SetWidth(100).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.PaidAmount,null)).Css("text-right");
        //columns.Add(u => u.RemainingAmount).Titled("Nợ chưa thu").Sortable(true).SetWidth(100).RenderValueAs(n => CommonSatic.ToCurrencyStr(n.RemainingAmount,null)).Css("text-right");

      
        
      
        //columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
        //columns.Add(u => u.IsArchive).Titled("TT ghi sổ").Sanitized(false).Encoded(false).RenderValueAs(n => (n.IsArchive ? "<span style=\"color:green\"><b>Đã ghi sổ</b></span>" : "<span style=\"color:red\"><b>Chưa ghi sổ</b></span>")).SetWidth(90).Sortable(true);
    }).SetRowCssClasses(item => (item.IsDeleted.HasValue && item.IsDeleted.Value ? "product-invoice-isdeleted" : ""))

    </div>
   
@section Scripts {
    <script>
        $('[data-rel=tooltip]').tooltip({ container: 'body' });
        $(function () {
            var sumTotalFixedDiscount = 0;
            var sumTotalIrregularDiscount = 0;
            var sumTotalAmount = 0;

            $("tr.grid-row").each(function () {
                var tr = $(this);
                var rows = $(tr).children();
                var TotalFixedDiscount = rows[6].innerHTML;
                var TotalIrregularDiscount = rows[7].innerHTML;
                var TotalAmount = rows[8].innerHTML;

                TotalFixedDiscount = TotalFixedDiscount.replace(/\./g, '');
                TotalFixedDiscount = parseFloat(TotalFixedDiscount);

                TotalIrregularDiscount = TotalIrregularDiscount.replace(/\./g, '');
                TotalIrregularDiscount = parseFloat(TotalIrregularDiscount);

                TotalAmount = TotalAmount.replace(/\./g, '');
                TotalAmount = parseFloat(TotalAmount);
                //console.log(amount);
                sumTotalFixedDiscount += TotalFixedDiscount;
                sumTotalIrregularDiscount += TotalIrregularDiscount;
                sumTotalAmount += TotalAmount;
            });

            //sum = sum.toFixed(2);
            var trTotals = "<tr class='text-right'><td></td><td></td><td></td><td></td><td></td><td></td><td style='color:red;font-weight:bold;'>" + currencyFormat(sumTotalFixedDiscount) + "</td><td style='color:red;font-weight:bold;'>" + currencyFormat(sumTotalIrregularDiscount) + "</td><td style='color:red;font-weight:bold;'>" + currencyFormat(sumTotalAmount) + "</td></tr>"
            $("tr.grid-row:last").after(trTotals);
        });
    </script>

    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
}