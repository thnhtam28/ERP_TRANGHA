@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Account.Models

@model ProductInvoiceViewModel

@{
    ViewBag.Title = "Chi tiết đơn hàng";

    bool IsPopup = Request["IsPopup"] == null || Convert.ToBoolean(Request["IsPopup"]) == false ? false : true;
    Layout = "~/Views/Shared/" + (IsPopup == false ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");

    IEnumerable<SelectListItem> staffList = (IEnumerable<SelectListItem>)ViewBag.staffList;
    IEnumerable<ProductInvoiceDetailViewModel> mbs = (IEnumerable<ProductInvoiceDetailViewModel>)ViewBag.mbs;
    IEnumerable<ProductViewModel> productList = (IEnumerable<ProductViewModel>)ViewBag.productList;
    SelectList provinceList = SelectListHelper.GetSelectList_Location("0", null, "- Tỉnh/Thành phố -");
    SelectList districtList = SelectListHelper.GetSelectList_Location(Model.ShipCityId, null, "- Quận/Huyện -");
    SelectList wardList = SelectListHelper.GetSelectList_Location(Model.ShipDistrictId, null, "- Xã/Phường -");

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "ProductInvoice",
        ActionName = "Detail",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = IsPopup,
        DisplayBackButton = true
    };
    int index = 1;
    var setting = Erp.BackOffice.Helpers.Common.GetSetting("hide_discount_product_invoice");
    var user_type_onl = Erp.BackOffice.Helpers.Common.CurrentUser.UserTypeCode;
    var tien_sauCK = Model.InvoiceList.Sum(x => x.Amount.Value) - Model.DiscountAmount;
    var vat = tien_sauCK * Convert.ToDecimal(Model.TaxFee / 100);
}
@*<link href="~/assets/css/jquery-ui.custom.min.css" rel="stylesheet" />*@
@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
    <style type="text/css">
        .mini-popup {
            position: relative;
            display: inline;
        }

        #popup_huy {
            position: absolute;
            bottom: 45px;
            left: 0px;
            width: 410px;
            height: 160px;
            max-width: inherit;
            top: inherit;
        }

        #popup_MoneyMove {
            position: absolute;
            bottom: 45px;
            left: -150px;
            width: 410px;
            height: 235px;
            max-width: inherit;
            top: inherit;
        }

        #popup_archive_coc {
            position: absolute;
            bottom: 45px;
            left: -190px;
            width: 410px;
            height: 270px;
            max-width: inherit;
            top: inherit;
        }

        #popup_archive {
            position: absolute;
            bottom: 45px;
            left: -190px;
            width: 410px;
            height: 270px;
            max-width: inherit;
            top: inherit;
        }

        .popover {
            max-width: 650px !important;
        }

        .widget-body .table thead:first-child tr {
            background: repeat-x #F2F2F2;
        }
    </style>
    <style>
        .ui-ribbon {
            position: relative;
            display: block;
            text-align: center;
            font-size: 15px;
            font-weight: 600;
            color: #fff;
            transform: rotate(43deg);
            padding: 7px 0;
            left: -2px;
            top: 19px;
            width: 140px;
            line-height: 20px;
            /*background-color: rgba(183, 51, 51, 0.94);*/
            box-shadow: 0 0 3px rgba(0,0,0,.3);
        }

        .ui-ribbon-wrapper {
            position: absolute;
            overflow: hidden;
            width: 108px;
            height: 103px;
            top: 0px;
            right: 12px;
            z-index: 1;
        }
    </style>
}


@helper renderStatus(string status)
{
    switch (status)
    {
        case "pending":
            <span class="label label-info pull-left" style="margin-right:5px">@Wording.OrderStatusDisplay_pending</span>
            break;
        case "inprogress":
            <span class="label label-warning pull-left" style="margin-right:5px">@Wording.OrderStatusDisplay_inprogress</span>
            break;
        case "shipping":
            <span class="label label-warning pull-left" style="margin-right:5px">@Wording.OrderStatusDisplay_shipping</span>
            break;
        case "complete":
            <span class="label label-success pull-left" style="margin-right:5px">@Wording.OrderStatusDisplay_complete</span>
            break;
        case "cancel":
            <span class="label label-danger pull-left" style="margin-right:5px">@Wording.OrderStatusDisplay_cancel</span>
            break;
        case "deposit":
            <span class="label label-warning">Đặt cọc</span>
            break;
        case "delete":
            <span class="label label-danger">@Wording.OrderStatusDisplay_delete</span>
            break;
    }
}
@helper renderCusstomer(int CustomerId, string CustomerName)
{
    <a onclick="OpenPopup('@Url.Action("Detail", "Customer", new { area = "Account", Id = CustomerId, IsPopup = true })', '', 0, 0)">
        @CustomerName
    </a>
}
@helper renderStaff(int StaffId, string StaffName)
{
    <a onclick="OpenPopup('@Url.Action("DetailBasicFull", "Staffs", new { area = "Staff", Id = StaffId, IsLayout = false })', '', 0, 0)">
        @StaffName
    </a>
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}

<div id="PIDetail" class="row">
    <div class="col-sm-6">
        <h4 class="green" style="margin-top:0px">
            @renderStatus(Model.Status)
            <span>Đơn hàng: @Model.Code (@Model.CreatedDate.Value.ToString("dd/MM/yyyy HH:mm"))</span>
            <span class="pull-right red" style="padding-right:0"><b>@CommonSatic.ToCurrencyStr(Model.TotalAmount, null)</b></span>
        </h4>
        <div id="home" class="tab-pane active">
            @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
            {
                <div class="alert alert-block alert-success">
                    <button class="close" data-dismiss="alert" type="button">
                        <i class="ace-icon fa fa-times"></i>
                    </button>
                    <i class="ace-icon fa fa-check green"></i>
                    @Html.Raw(ViewBag.SuccessMessage)
                </div>
            }

            @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
            {
                <div class="alert alert-block alert-danger">
                    <button class="close" data-dismiss="alert" type="button">
                        <i class="ace-icon fa fa-times"></i>
                    </button>
                    <i class="ace-icon fa fa-warning red"></i>
                    @Html.Raw(ViewBag.FailedMessage)
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.Note))
            {
                var a = Model.Note;
                a = a.Replace("<br>", " ");
                a = a.Replace("<b>", " ");
                a = a.Replace("</b>", " ");
                a = a.Replace("</br>", " ");
                <div class="alert alert-warning">@a</div>
            }

            @if (Model.IsDeleted == true)
            {
                <div class="alert alert-danger">
                    <p><i class="ace-icon fa fa-warning red"></i> @Model.ModifiedUserName đã hủy bỏ chứng từ lúc @Model.ModifiedDate.Value.ToString("HH:mm dd/MM/yyyy").</p>
                    <p>Lý do hủy: @Model.CancelReason</p>
                </div>
            }

            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th class="">STT</th>
                            <th class="">Tên SP/DV</th>
                            <th>Lô</th>
                            <th>Hạn SD</th>
                            <th class="">Số lượng</th>
                            <th class="">Đơn giá</th>
                            <th class="">Chiết khấu</th>
                            <th class="detail-th-total">Thành tiền</th>
                            <th class="">Tặng</th>
                        </tr>

                    </thead>

                    <tbody class="detailList">
                        @foreach (var qq in Model.InvoiceList.GroupBy(x => x.ProductType))
                        {
                            <tr class="warning">
                                <td colspan="4">
                                    @(qq.Key == "product" ? "Sản phẩm" : "Dịch vụ")
                                </td>
                                <td class="text-right">@Common.PhanCachHangNgan2(qq.Sum(x => x.Quantity))</td>
                                <td></td>
                                <td class="text-right">@Common.PhanCachHangNgan2(qq.Sum(x => x.DiscountAmount))</td>
                                <td class="text-right">@Common.PhanCachHangNgan2(qq.Sum(x => x.Amount))</td>
                                <td></td>
                            </tr>

                            foreach (var item in Model.InvoiceList.Where(x => x.ProductType == qq.Key))
                            {

                                <tr data-type="" data-id="">
                                    <td class="text-center">@(index++)</td>
                                    <td class="has-error">
                                        @*<p><b>@item.CategoryCode</b></p><p>*@
                                        @(item.ProductCode) - @(item.ProductName)

                                    </td>
                                    <td>@item.LoCode</td>
                                    <td>@(item.ExpiryDate == null ? "" : item.ExpiryDate.Value.ToString("dd/MM/yyyy"))</td>
                                    <td class="text-right">@Common.PhanCachHangNgan2(item.Quantity)</td>
                                    <td class="text-right detail-product-price">@CommonSatic.ToCurrencyStr(item.Price, null)</td>
                                    <td class="text-right">
                                        @CommonSatic.ToCurrencyStr(item.DiscountAmount, null)<br><i>(@(item.Discount)%)</i>
                                    </td>
                                    <td class="detail_item_total text-right">
                                        @CommonSatic.ToCurrencyStr(item.Tiensaugiam, null)
                                    </td>
                                    <td>
                                        @if (item.is_TANG == 1)
                                        {
                                            <input type="checkbox" class="ace" value="@(item.is_TANG)" checked="checked" disabled>
                                            <span class="lbl"></span>
                                        }
                                        else
                                        {
                                            <input type="checkbox" class="ace" value="@(item.is_TANG)" disabled>
                                            <span class="lbl"></span>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                    <tfoot>
                        <tr data-type="" data-id="">
                            <td class="text-center" colspan="4"></td>
                            <td class="text-right">@Common.PhanCachHangNgan2(Model.InvoiceList.Sum(x => x.Quantity))</td>
                            <td class="text-right"></td>
                            <td class="text-right">
                                @CommonSatic.ToCurrencyStr(Model.InvoiceList.Sum(x => x.DiscountAmount), null)
                            </td>
                            <td class="text-right">
                                @CommonSatic.ToCurrencyStr(Model.InvoiceList.Sum(x => x.Tiensaugiam), null)
                            </td>
                            <td class="text-right"></td>
                        </tr>

                    </tfoot>
                </table>
            </div>

        </div>

    </div>
    <div class="col-sm-6">
        <div class="widget-container-col ui-sortable" id="widget-container-col-10" style="min-height: 108px;">
            <div class="widget-box ui-sortable-handle" id="widget-box-10" style="opacity: 1;">
                <div class="widget-header widget-header-small">
                    <div class="widget-toolbar no-border pull-left">
                        <ul class="nav nav-tabs" id="myTab">
                            <li class="active">
                                <a data-toggle="tab" href="#info_invoice" aria-expanded="true"><i class="fa fa-spinner"></i> Tổng quan</a>
                            </li>

                            <li class="">
                                <a data-toggle="tab" href="#ship" aria-expanded="false"><i class="fa fa-ship"></i> Giao hàng</a>
                            </li>
                            <li class="">
                                <a data-toggle="tab" href="#pay_amount" aria-expanded="false"><i class="fa fa-paypal"></i> Thanh toán</a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="widget-body">
                    <div class="widget-main padding-6">
                        <div class="tab-content">
                            <div id="info_invoice" class="tab-pane active">
                                <div class="detail-view">
                                    <div class="row control-group">
                                        @Html.HiddenFor(m => m.Code)
                                        @Html.DetailViewItemFor2(model => model.BranchName, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.Code, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.CustomerCode, null, null, "col-xs-4", "col-xs-8")
                                        @Html.HiddenFor(m => m.CustomerCode)
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItem(renderCusstomer(Model.CustomerId.Value, Model.CustomerName), "CustomerName", Wording.Customer, null, null, "col-xs-4", "col-xs-8")
                                        @Html.HiddenFor(m => m.CustomerName)
                                    </div>

                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.StaffCreateName, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.CountForBrand, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.ManagerUserName, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.ProductInvoiceOldCode, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.CustomSwitchesFor(model => model.IsBonusSales, SwitchesStyle.CheckboxStyle, true, WidthType.none, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @*@Html.DetailViewItemFor2(model => model.TyleHuong, null, null, "col-xs-4", "col-xs-8")*@
                                        @if (Model.TyleHuong != null)
                                        {
                                            <div class="col-xs-4 control-label"><label for="InvoiceCode">Tỷ lệ hưởng</label></div><div class="col-xs-8 control-value" style="">@Model.TyleHuong %</div>
                                        }
                                        else
                                        {
                                            <div class="col-xs-4 control-label"><label for="InvoiceCode">Tỷ lệ hưởng</label></div><div class="col-xs-8 control-value" style="">@Model.TyleHuong</div>

                                        }
                                    </div>

                                </div>
                            </div>
                            <div id="ship" class="tab-pane">
                                <div class="detail-view">
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.ShipName, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.ShipPhone, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.ShipCityName, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.ShipDistrictName, null, null, "col-xs-4", "col-xs-8")
                                    </div>

                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.ShipWardName, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.ShipAddress, null, null, "col-xs-4", "col-xs-8")
                                    </div>
                                </div>
                            </div>
                            <div id="pay_amount" class="tab-pane">
                                <div class="detail-view">
                                    <div class="row control-group">
                                        @Html.DetailViewItem(CommonSatic.ToCurrencyStr(Model.InvoiceList.Sum(x => x.Amount), null), "TotalAmount", "Tổng tiền theo SP/DV", null, "", "col-xs-5", "col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItem(CommonSatic.ToCurrencyStr(Model.DiscountAmount, null) + " (" + Common.PhanCachHangNgan2(Model.Discount) + "%)", "DiscountAmount", "Tiền chiết khấu HĐ", null, "", "col-xs-5", "col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItem(CommonSatic.ToCurrencyStr(tien_sauCK, null), "TienSauCK", "Tổng tiền sau CK", null, "", "col-xs-5", "col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItem(CommonSatic.ToCurrencyStr(vat, null) + " (" + Common.PhanCachHangNgan2(Model.TaxFee) + "%)", "VAT", "Tiền VAT", null, "", "col-xs-5", "col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItem(CommonSatic.ToCurrencyStr(Model.TotalAmount, null), "TotalAmount", "Tổng tiền cần thanh toán", null, "font-weight:bold;color:red", "col-xs-5", "col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.NextPaymentDate, true, null, "font-weight:bold;", "col-xs-5", "col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.Discount_KM, null, "font-weight:bold;", "col-xs-5", "Discount_KM col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.Discount_DB, null, "font-weight:bold;", "col-xs-5", "Discount_DB col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.Discount_VIP, null, "font-weight:bold;", "col-xs-5", "Discount_VIP col-xs-7")
                                    </div>
                                    <div class="row control-group">
                                        @Html.DetailViewItemFor2(model => model.Total_Discount, null, "font-weight:bold;", "col-xs-5", "Total_Discount col-xs-7")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <p></p>
        <div class="widget-box">
            <div class="widget-header">
                <h5 class="widget-title"><i class="fa fa-gift"></i> Khuyến mãi của hóa đơn</h5>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    @Html.Partial("PartialDetailListPromotion", Model.LogCommission)
                </div>
            </div>
        </div>
        <p></p>
        <div class="widget-box">
            <div class="widget-header">
                <h5 class="widget-title">Lịch sử thanh toán</h5>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    <table class="table table-striped grid-table">
                        <thead>
                            <tr>
                                <th class="grid-header">Ngày giao dịch</th>
                                <th class="grid-header">Loại giao dịch</th>
                                <th class="grid-header">Mã giao dịch</th>
                                <th class="grid-header" style="text-align: right;">Nợ</th>
                                <th class="grid-header" style="text-align: right;">Có</th>
                                <th class="grid-header" style="text-align: right;">HTTT</th>
                                <th class="grid-header" style="text-align: right;">Ghi chú</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.ListTransactionLiabilities.Count > 0)
                            {
                                foreach (var item in Model.ListTransactionLiabilities)
                                {
                                    <tr class="grid-row">
                                        <td>@item.CreatedDate.Value.ToString("dd/MM/yyyy HH:mm")</td>
                                        <td>@item.TransactionName</td>
                                        <td>
                                            @switch (item.TransactionModule)
                                            {
                                                case "MoneyMove":
                                                    {
                                                        @item.TransactionCode
                                                        break;
                                                    }
                                                case "ProductInvoice":
                                                    {
                                                        @item.TransactionCode
                                                        break;
                                                    }
                                                case "Receipt":
                                                    {
                                                        <a onclick="OpenPopup('/@(item.TransactionModule)/Detail/?TransactionCode=@(item.TransactionCode)&IsPopup=true', 'Thông tin chứng từ', 500, 500)">@item.TransactionCode</a>
                                                        break;
                                                    }
                                                default:
                                                    {
                                                        <a onclick="OpenPopup('/@(item.TransactionModule)/Detail/?TransactionCode=@(item.TransactionCode)&IsPopup=true', 'Thông tin chứng từ', 0, 0)">@item.TransactionCode</a>
                                                        break;
                                                    }

                                            }
                                        </td>
                                        <td id="Debit" style="text-align: right; font-weight: bold">@(CommonSatic.ToCurrencyStr(item.Debit, null))</td>
                                        <td id="Credit" style="text-align: right; font-weight: bold">@(CommonSatic.ToCurrencyStr(item.Credit, null))</td>
                                        <td id="HTTT" style="text-align: right; font-weight: bold">@item.PaymentMethod</td>
                                        <td id="GHICHU" style="text-align: right; font-weight: bold">@item.Note</td>
                                    </tr>
                                }
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td hidden id="TotalDebit" colspan="3">@CommonSatic.ToCurrencyStr(Model.ListTransactionLiabilities.Sum(x => x.Debit), null)</td>
                                <td hidden id="TotalCredit" colspan="2">@CommonSatic.ToCurrencyStr(Model.ListTransactionLiabilities.Sum(x => x.Credit), null)</td>
                            </tr>
                            <tr style="border:none">
                                <td colspan="4">Nợ còn</td>
                                <td style="color:red; text-align:right" id="Total" colspan="3">@CommonSatic.ToCurrencyStr(Model.tienconno, null)</td>

                            </tr>
                        </tfoot>
                    </table>

                </div>
            </div>
        </div>
        <p></p>
        <div class="widget-box">
            <div class="widget-header">
                <h5 class="widget-title">Chứng từ</h5>
            </div>
            <div class="widget-body">
                <div class="widget-main">
                    @{Html.RenderAction("Relationship", "Transaction", new { area = "Account", TransactionCode = Model.Code });}
                </div>
            </div>
        </div>

    </div>
</div>

@using (Html.BeginButtonContainer(pageSetting))
{
    if (Model.IsDeleted != null && Model.IsDeleted == false)
    {
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Print", "ProductInvoice", "Sale"))
        {
            <a href="@Url.Action("Print", "ProductInvoice", new { id = Model.Id })" target="_blank" class="btn btn-white btn-success btn-sm">
                <i class="ace-icon fa fa-print"></i>
                In phiếu
            </a>

            <a class="btn btn-white btn-success btn-sm" href="@Url.Action("Print", "ProductInvoice", new { id = Model.Id, ExportExcel = true })">
                <i class="ace-icon fa fa-file-excel-o"></i>
                Xuất excel
            </a>
        }
        if (Model.AllowEdit.Value)
        {
            if (!Model.IsArchive)
            {
                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("MoneyMove", "ProductInvoice", "Sale"))
                {
                    <div class="mini-popup">
                        <a class="btn btn-mini btn-success" data-toggle="collapse" data-target="#popup_MoneyMove">
                            <i class="ace-icon fa fa-cc-paypal"></i>
                            Nhận tiền chuyển
                        </a>

                        <div id="popup_MoneyMove" class="popover fade top">
                            <div class="arrow" style="left: 50%;"></div>
                            <h3 class="popover-title"><i class="ace-icon fa fa-cc-paypal"></i> Nhận tiền chuyển</h3>
                            <div class="popover-content">
                                @using (Html.BeginForm_AceStyle((string)ViewBag.Title, "MoneyMove", "ProductInvoice", null, FormMethod.Post, new { id = "MoneyMoveInvoice", @class = "form-horizontal" }))
                                {
                                    @Html.ValidationSummary(true)
                                    @Html.HiddenFor(model => model.Id)
                                    @Html.HiddenFor(model => model.RemainingAmount)
                                    @Html.HiddenFor(model => model.ReceiptViewModel.Name)
                                    @Html.HiddenFor(model => model.ProductInvoiceOldId)
                                    @Html.HiddenFor(model => model.tienconno)
                                    @*<input type="hidden" id="ProductInvoiceOldId" name="ProductInvoiceOldId" value="" />*@
                                    <div class="NextPaymentDate-container">
                                        <div class="control-group form-group">
                                            <label class="control-label " for="ProductInvoiceOldCode">Đơn hàng trả</label>
                                            <div class="control-value" style="width: 52%;">

                                                <div class="input-group">
                                                    <input id="ProductInvoiceOldCode" name="ProductInvoiceOldCode" type="hidden" value="">
                                                    <input id="ProductInvoiceOldCode_DisplayText" name="ProductInvoiceOldCode_DisplayText" readonly="True" type="text" value="">
                                                    <span class="input-group-addon productinvoiceoldcode" id="ProductInvoiceOldCode_DisplayText1" style="cursor:pointer">
                                                        <i class="ace-icon fa fa-search"></i>
                                                    </span>

                                                </div>

                                            </div>
                                        </div>
                                        <div class="control-group form-group" style="border-top:0px">
                                            <label class="control-label no-padding-right col-lg-5 col-md-4 col-sm-4" for="AmountRemain">Số tiền chuyển</label>
                                            <div class="control-value col-lg-7 col-md-8 col-sm-8">
                                                <div class="clearfix">
                                                    @Html.TextBox("TotalAmountMoneyMove", Model.TotalAmountMoneyMove, new { @class = "col-sm-12 text-right numberinput2", @readonly = "readonly" })
                                                </div>
                                            </div>
                                        </div>
                                        <div class="control-group form-group" style="border-top:0px">
                                            <label class="control-label no-padding-right col-lg-5 col-md-4 col-sm-4" for="NoteMoneyMove">Ghi chú</label>
                                            <div class="control-value col-lg-7 col-md-8 col-sm-8">
                                                <div class="clearfix">
                                                    @Html.TextBox("NoteMoneyMove", Model.NoteMoneyMove, new { @class = "col-sm-12 text-right" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <p class="top-10">
                                        <a class="btn btn-mini btn-primary" id="btnMove">
                                            Đồng ý
                                        </a>
                                        <a class="btn btn-white btn-sm no-border" data-toggle="collapse" data-target="#popup_MoneyMove">Đóng</a>
                                    </p>
                                }
                            </div>
                        </div>
                    </div>
                }
                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "ProductInvoice", "Sale"))
                {
                    <a style="margin-right:0.3%" class="btn btn-primary btn-mini" href="@Url.Action("Create", "ProductInvoice", new { Id = Model.Id })">
                        <i class="ace-icon fa fa-edit "></i>
                        Chỉnh sửa
                    </a>
                }

                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("CreateFromProductInvoiceDetail", "Membership", "Sale"))
                {//href="@Url.Action("CreateFromProductInvoiceDetail", "Membership", new { Id = Model.Id })"
                    if (mbs.Count() != 0)
                    {
                        <a style="margin-right:6%" class="btn btn-white btn-danger btn-sm no-border" onclick="OpenPopup('@Url.Action("CreateFromProductInvoiceDetail", "Membership", new { area = "Sale", Id = Model.Id, IsPopup = true })','',0,0)">
                            <i class="menu-icon fa fa-file-text-o"></i>

                            @if (Model.coMBS == 0)
                            {
                                <text>Tạo MBS</text>;
                            }
                            else
                            {
                                <text>Xem MBS</text>
                            }

                        </a>
                    }
                }
                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Success", "ProductInvoice", "Sale"))
                {

                    <div class="mini-popup">

                        <a class="btn btn-mini btn-success" data-toggle="collapse" data-target="#popup_archive">
                            <i class="ace-icon fa fa-cc-paypal"></i>
                            Ghi sổ
                        </a>

                        <div id="popup_archive" class="popover fade top" style="height:200px">
                            <div class="arrow" style="left: 50%;"></div>
                            <h3 class="popover-title"><i class="ace-icon fa fa-cc-paypal"></i> Ghi sổ</h3>
                            <div class="popover-content">
                                @using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Success", "ProductInvoice", null, FormMethod.Post, new { id = "SuccessInvoice", @class = "form-horizontal" }))
                                {
                                    @Html.ValidationSummary(true)
                                    @Html.HiddenFor(model => model.Id)

                                    @Html.HiddenFor(model => model.ReceiptViewModel.Name)
                                    <div class="control-group form-group">
                                        <label class="control-label no-padding-right col-lg-5 col-md-4 col-sm-4" for="ReceiptViewModel_Amount">Số tiền</label>
                                        <div class="control-value col-lg-7 col-md-8 col-sm-8">
                                            <input class="col-sm-12 text-right numberinput2" id="ReceiptViewModel_Amount" name="ReceiptViewModel.Amount" value=@Model.tienconno type="text" readonly>
                                        </div>
                                    </div>

                                    <div class="NextPaymentDate-container">
                                        <div class="control-group form-group" style="border-top:0px">
                                            <label class="control-label no-padding-right col-lg-5 col-md-4 col-sm-4" for="AmountRemain">Số tiền còn lại</label>
                                            <div class="control-value col-lg-7 col-md-8 col-sm-8">
                                                <div class="clearfix">
                                                    @Html.TextBox("AmountRemain", Model.tienconno, new { disabled = "disabled", @class = "col-sm-12 text-right numberinput2" })
                                                </div>
                                            </div>

                                        </div>
                                        @Html.DateInput(model => model.NextPaymentDate_Temp, "dd/MM/yyyy", "99/99/9999", true, WidthType.span12, "col-lg-5 col-md-4 col-sm-4", "col-lg-7 col-md-8 col-sm-8")

                                        @Html.CustomDropDownListFor(model => model.ReceiptViewModel.PaymentMethod,SelectListHelper.GetSelectList_Category("FormPayment", null, "Name", null), WidthType.span12, true, null, DropdownListStyle.DropdownListStyleDefault)
                                    <div class="control-group form-group" style="border-top:0px">
                                        <label class="control-label no-padding-right col-lg-5 col-md-4 col-sm-4" for="GHICHU">Ghi chú</label>
                                        <div class="control-value col-lg-7 col-md-8 col-sm-8">
                                            @Html.TextBox("GHICHU", Request["GHICHU"], new { @placeholder = "Ghi Chú", @class = "" })
                                        </div>
                                    </div>

                                    </div>
                                    <div>
                                        <p class="top-10">
                                            <a class="btn btn-mini btn-primary" id="btnSuccess" value="Success">
                                                Đồng ý
                                            </a>
                                            <a class="btn btn-white btn-sm no-border" data-toggle="collapse" data-target="#popup_archive">Đóng</a>
                                        </p>
                                    </div>

                                }
                            </div>
                        </div>
                    </div>


                }
                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Archive", "ProductInvoice", "Sale"))
                {
                    <div class="mini-popup">

                        <a class="btn btn-mini btn-success" data-toggle="collapse" data-target="#popup_archive_coc">
                            <i class="ace-icon fa fa-cc-paypal"></i>
                            Đặt cọc
                        </a>

                        <div id="popup_archive_coc" class="popover fade top">
                            <div class="arrow" style="left: 50%;"></div>
                            <h3 class="popover-title"><i class="ace-icon fa fa-cc-paypal"></i> Đặt cọc</h3>
                            <div class="popover-content">
                                @using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Archive", "ProductInvoice", null, FormMethod.Post, new { id = "ArchiveInvoice", @class = "form-horizontal" }))
                                {
                                    @Html.ValidationSummary(true)
                                    @Html.HiddenFor(model => model.Id)

                                    @Html.HiddenFor(model => model.ReceiptViewModel.Name)
                                    <div class="control-group form-group">
                                        <label class="control-label no-padding-right col-lg-5 col-md-4 col-sm-4" for="ReceiptViewModel_Amount">Tiền cọc</label>
                                        <div class="control-value col-lg-7 col-md-8 col-sm-8">
                                            <input class="col-sm-12 text-right numberinput2" id="ReceiptViewModel_Amount_coc" name="ReceiptViewModel.Amount" value="1" type="text">
                                        </div>
                                    </div>

                                    <div class="NextPaymentDate-container">
                                        <div class="control-group form-group" style="border-top:0px">
                                            <label class="control-label no-padding-right col-lg-5 col-md-4 col-sm-4" for="AmountRemain">Số tiền còn lại</label>
                                            <div class="control-value col-lg-7 col-md-8 col-sm-8">
                                                <div class="clearfix">
                                                    @Html.TextBox("AmountRemain", Model.tienconno, new { disabled = "disabled", @class = "col-sm-12 text-right numberinput2" })
                                                </div>
                                            </div>
                                        </div>
                                        @Html.DateInput(model => model.NextPaymentDate_Temp, "dd/MM/yyyy", "99/99/9999", true, WidthType.span12, "col-lg-5 col-md-4 col-sm-4", "col-lg-7 col-md-8 col-sm-8")
                                    </div>

                                    @Html.CustomDropDownListFor(model => model.ReceiptViewModel.PaymentMethod, SelectListHelper.GetSelectList_Category("FormPayment", null, "Name", null), WidthType.span12, true, null, DropdownListStyle.DropdownListStyleDefault)
                                    <div class="control-group form-group" style="border-top:0px">
                                        <label class="control-label no-padding-right col-lg-5 col-md-4 col-sm-4" for="GHICHU">Ghi chú</label>
                                        <div class="control-value col-lg-7 col-md-8 col-sm-8">
                                            @Html.TextBox("GHICHU", Request["GHICHU"], new { @placeholder = "Ghi Chú", @class = "" })
                                        </div>
                                    </div>
                                    <p class="top-10">
                                        <a class="btn btn-mini btn-primary" id="btnArchive">
                                            Đồng ý
                                        </a>
                                        <a class="btn btn-white btn-sm no-border" data-toggle="collapse" data-target="#popup_archive_coc">Đóng</a>
                                    </p>
                                }
                            </div>
                        </div>
                    </div>
                }
                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("AddPromotion", "ProductInvoice", "Sale"))
                {
                    <a class="btn btn-primary btn-white btn-sm" href="@Url.Action("AddPromotion", "ProductInvoice", new { Id = Model.Id })">
                        <i class="ace-icon fa fa-gift"></i>
                        Thêm khuyến mãi
                    </a>
                }

                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "ProductInvoice", "Sale"))
                {
                    <div class="mini-popup">
                        <a class="btn btn-white btn-sm no-border" data-toggle="collapse" data-target="#popup_huy" style="color: red !important;">
                            <i class="ace-icon fa fa-trash"></i>
                            Hủy đơn hàng
                        </a>
                        <div id="popup_huy" class="popover fade top">
                            <div class="arrow" style="left: 50%;"></div>
                            <h3 class="popover-title"><i class="ace-icon fa fa-bolt red"></i> Hủy đơn hàng</h3>
                            <div class="popover-content">
                                @using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Delete", "ProductInvoice", null, FormMethod.Post, new { id = "ProductInvoice_Delete", @class = "form-horizontal clearfix" }))
                                {
                                    @Html.HiddenFor(m => m.Id)
                                    @Html.CustomTextAreaFor(model => model.CancelReason, null, WidthType.span12)

                                    <p class="top-10">
                                        <button id="btnDelete" class="btn btn-mini btn-primary" type="submit" name="Submit" value="Save" onclick="return submitDelete();">
                                            Đồng ý
                                        </button>
                                        <a class="btn btn-white btn-sm no-border" data-toggle="collapse" data-target="#popup_huy">Đóng</a>
                                    </p>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {

                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("CreateFromProductInvoiceDetail", "Membership", "Sale"))
                {
                    if (mbs.Count() != 0)
                    {
                        <a style="margin-right:6%" class="btn btn-white btn-danger btn-sm no-border" onclick="OpenPopup('@Url.Action("CreateFromProductInvoiceDetail", "Membership", new { area = "Sale", Id = Model.Id, IsPopup = true })','',0,0)">
                            <i class="menu-icon fa fa-file-text-o"></i>
                            @if (Model.coMBS == 0)
                            {
                                <text>Tạo MBS</text>
                            }
                            else
                            {
                                <text>Xem MBS</text>
                            }


                        </a>
                    }
                }

                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("UnArchive", "ProductInvoice", "Sale"))
                {
                    using (Html.BeginForm("UnArchive", pageSetting.ModuleName, FormMethod.Post, new { @class = "inline" }))
                    {
                        @Html.HiddenFor(m => m.Id)
                        @Html.Hidden("IsPopup", IsPopup)



                        <button class="btn btn-white btn-danger btn-sm no-border" style="align-content:center" type="submit" name="Submit" value="Save" onclick="return confirm('Bạn chắc chắn muốn thực hiện thao tác này?')">
                            Bỏ ghi sổ
                        </button>

                    }
                }
            }

        }

    }
}

@section Scripts {
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
    @*<script src="~/assets/js/jquery-ui.custom.min.js"></script>*@
    <script src="~/assets/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript">

        document.getElementById("ProductInvoiceOldCode_DisplayText1").onclick = function () {
            var CustomerCode = $("#CustomerCode").val();
            var CustomerName = $("#CustomerName").val();
            var MainCode = $("#Code").val();
            console.log(MainCode)
            OpenPopup('@Url.Action("IndexSearch_return", "ProductInvoice", new { area = "Sale" })?txtCustomerCode=' + CustomerCode + '&txtCusName=' + CustomerName + '&MainCode=' + MainCode +'&IsPopup=true', 'Tìm đơn hàng trả', 0, 420);
        };

        $(document).ready(function () {
            LoadNumberInput();
            $('#btnSuccess').click(function () {
                
                //kiem tra ngay thang
                //ngay bat dau;
                var startDate ="";// $("#CreatedDate").val().split(" ");
                var a = "@Model.CreatedDate.Value.ToString("dd/MM/yyyy HH:mm")";
                startDate = a.split(" ");
                //cat thoi gian
                var catgio = startDate[1].split(":");
                var gio = catgio[0];
                var phut = catgio[1];
                //cat ngay
                var catthoigian = startDate[0].split("/");
                var catngay = catthoigian[0];
                var catthang = catthoigian[1];
                var catnam = catthoigian[2];
                //ngay ket thuc
                var endDate = $("#NextPaymentDate_Temp").val().split(" ");
                //cat ngay
                var catthoigian1 = endDate[0].split("/");
                var catngay1 = catthoigian1[0];
                var catthang1 = catthoigian1[1];
                var catnam1 = catthoigian1[2];
                var message="";
                //so sanh
                if (catnam > catnam1) {
                    
                    message="Ngày trả nợ phải lớn hơn ngày Đơn Hàng!!!";
                    
                }
                else if (catnam == catnam1)
                {   
                    {
                    if (catthang > catthang1) {
                        message = "Ngày trả nợ phải lớn hơn ngày Đơn Hàng!!!";
                    } else if (catthang == catthang1) {
                        if (catngay > catngay) {
                            message = "Ngày trả nợ phải lớn hơn ngày Đơn Hàng!!!";
                        }
                    }
                }
                }
                if (message != "") {
                    alertPopup("Lỗi", message, "warning");
                    return false;
                }
                else {
                    //ShowLoading();
                    ClearFormatBeforeSubmit($("#SuccessInvoice"));
                    $("#SuccessInvoice").submit();
                } 

                
                //  HideLoading();
            });

            $('#MoneyMove').click(function () {
                ShowLoading();
                ClearFormatBeforeSubmit($("#MoneyMoveInvoice"));
                $("#MoneyMoveInvoice").submit();
                 //HideLoading();
            });


            $('#btnMove').click(function () {
                if ($('#ProductInvoiceOldCode_DisplayText').val() == "" || $('#TotalAmountMoneyMove').val() == "") {
                    alert("Thông tin không được bỏ trống !");
                }
                else {
                    ShowLoading();
                    ClearFormatBeforeSubmit($("#MoneyMoveInvoice"));
                    $("#MoneyMoveInvoice").submit();
                }
                //  HideLoading();
            });

            $('#btnArchive').click(function () {
                
                var startDate ="";// $("#CreatedDate").val().split(" ");
                var a = "@Model.CreatedDate.Value.ToString("dd/MM/yyyy HH:mm")";
                startDate = a.split(" ");
                //cat thoi gian
                var catgio = startDate[1].split(":");
                var gio = catgio[0];
                var phut = catgio[1];
                //cat ngay
                var catthoigian = startDate[0].split("/");
                var catngay = catthoigian[0];
                var catthang = catthoigian[1];
                var catnam = catthoigian[2];
                //ngay ket thuc
                var endDate = $("#NextPaymentDate_Temp").val().split(" ");
                //cat ngay
                var catthoigian1 = endDate[0].split("/");
                var catngay1 = catthoigian1[0];
                var catthang1 = catthoigian1[1];
                var catnam1 = catthoigian1[2];
                var message="";
                //so sanh
                if (catnam > catnam1) {
                    
                    message="Ngày trả nợ phải lớn hơn ngày Đơn Hàng!!!";
                    
                }
                else if (catnam == catnam1)
                {   
                    {
                        if (catthang > catthang1) {
                            message = "Ngày trả nợ phải lớn hơn ngày Đơn Hàng!!!";
                        } else if (catthang == catthang1) {
                            if (catngay > catngay) {
                                message = "Ngày trả nợ phải lớn hơn ngày Đơn Hàng!!!";
                            }
                        }
                    }
                }
                if (message != "") {
                    alertPopup("Lỗi", message, "warning");
                    return false;
                }
                else {
                    //ShowLoading();
                    ClearFormatBeforeSubmit($("#ArchiveInvoice"));
                    $("#ArchiveInvoice").submit();
                } 
                
                //  HideLoading();
            });
            $('.create_payment').show();
            var modelNextDayPayment = '@DateTime.Now.AddDays(30).ToString("dd/MM/yyyy")';
            $('#NextPaymentDate').val(modelNextDayPayment);
            // $('#AmountRemain').val('0');

            $('#ReceiptViewModel_Amount').focus(function () {
                $(this).select();
            });
            $("#ReceiptViewModel_PaymentMethod").change(function () {
                $(this).css("border-color", "#b5b5b5");
            });

            //-------------------------------Tiến dev commentline vì lỗi làm mất khung ----------------------------
            @*$('#ReceiptViewModel_Amount').blur(function () {

                var Amount = '@Model.tienconno';
                var totalAmount = parseFloat(Amount);
                var amount = parseFloat(removeComma($('#ReceiptViewModel_Amount').val()));
                if (amount < totalAmount) {
                    $('.NextPaymentDate-container').show();
                    $('#AmountRemain').val(numeral(totalAmount - amount).format('0,0'));
                }
                else {
                    $('#ReceiptViewModel_Amount').val(numeral(totalAmount).format('0,0'));
                    $('.NextPaymentDate-container').hide();
                }
                if (amount >= 20000000) {
                    $("#ReceiptViewModel_PaymentMethod").val("Chuyển khoản").css("border-color", "#b5b5b5");
                }
                else {
                    $("#ReceiptViewModel_PaymentMethod").val("Tiền mặt").css("border-color", "red");
                }
            });*@

            $(function () {
                var TotalCredit = parseFloat(removeComma($('#TotalCredit').text()));
                var TotalDebit = parseFloat(removeComma($('#TotalDebit').text()));
                var sum = 0;
                sum = TotalDebit - TotalCredit;
                //$('#Total').text(numeral(sum).format('0,0'));


                var Discount_KM = 0;
                var Discount_VIP = 0;
                var Discount_DB = 0;

                Discount_KM = (isNaN(parseFloat($('.Discount_KM').text())) ? 0 : parseFloat($('.Discount_KM').text()));
                //PlusPoint = (isNaN(parseFloat($('#PlusPoint').val())) ? 0 : parseFloat($('#PlusPoint').val()));
                Discount_VIP = (isNaN(parseFloat($('.Discount_VIP').text())) ? 0 : parseFloat($('.Discount_VIP').text()));
                Discount_DB = (isNaN(parseFloat($('.Discount_DB').text())) ? 0 : parseFloat($('.Discount_DB').text()));

                var totalDiscount = 0;
                totalDiscount = (parseFloat(Discount_KM) + parseFloat(Discount_VIP) + parseFloat(Discount_DB)); //+ parseFloat(PlusPoint));

                totalDiscount = parseFloat(totalDiscount);
                $('.Total_Discount').text(totalDiscount);
            });

            $(document).ready(function () {
                $('#ReceiptViewModel_Amount_coc').change(function () {
                    $(this).val($(this).val().replace(/\-/g, ''));
                    $(this).val($(this).val().replace(/[^0-9.,]/g, ''));
                    var ralVal = numeral($(this).val());
                    if (ralVal <= 1) {
                        $(this).val(1);
                    }
                });
            });
        });
        function UpdateNote(Id) {
            ShowLoading();
            var status = $("#status_" + Id).val();
            $.ajax({
                url: '/Service/UpdateUsingServiceLogDetail',
                type: 'GET',
                data: { Id: Id, status: status },
                success: function (res) {
                    if (res == "success") {
                        alertPopup("Thông báo", "Cập nhật ghi chú thành công!", "success");
                        $("#status__" + Id).text(status);
                        $("#status_" + Id).val(status);
                        $("#status_" + Id).text(status);
                        //$('[data-rel=popover]').popover('hide');
                        //setInterval(function () {
                        //    window.location.reload();
                        //}, 2000);
                        $("#myModal_" + Id).modal("hide");
                    } else {
                        alertPopup("Lỗi", "Cập nhật ghi chú thất bại!", "danger");
                    }
                    HideLoading();
                }
            });

        };
        function EditNote() {
            $('[data-rel=popover]').popover('hide');
        }
        $('.popover-dismiss').popover({
            trigger: 'focus'
        })


        function selectLocationItem(id, code, name, orderNo) {

            $("#SalerName").val(name);
            $("#StaffId").val(id);
            ClosePopup();
        }

        function CreateSetting() {
            $("#panel_create_service").show();
            $('#create_service').addClass("hidden");
        }
        function CloseSetting() {
            $("#panel_create_service").hide();
            $('#create_service').removeClass("hidden");
            $('#create_service').show();
        }
        $(document).ready(function () {
            $('[data-rel=popover]').popover({ html: true });

        });

        function ClosePopupAndDoSomething() {
            ClosePopup(true);
            ShowLoading();
        }

        function clickActive(elem, id) {
            //  console.log(1111);
            var $this = $(elem);

            var $chekbox = $this.find('input[type="checkbox"]');
            var $label = $this.find('label[name="label_' + id + '"]');
            if ($chekbox.is(':checked')) {
                $chekbox.prop('checked', false);
                $label.removeClass('active');
            } else {
                $chekbox.prop('checked', true);
                $label.addClass('active');
            }
            //$('span[id="count_check_' + id + '"]').text($this.parent().find(' > label.active').length);
        }
            //tiền tệ format
            function currencyFormatDE(num) {
                return (
                    num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.')
                ) // use . as a separator
            }
        function selectItemCustomer(id, name, customername, customerid, tiendatra) {
            //alert(tiendatra);
            $("#ProductInvoiceOldCode_DisplayText").val(name);
            $("#ProductInvoiceOldId").val(id);
            $("#TotalAmountMoneyMove").val(currencyFormatDE(tiendatra));

            ClosePopup();
        }
    </script>
    <script type="text/javascript">

        function submitDelete() {
            debugger
            var note = $("#CancelReason").val();
            if (note == '') {
                alertPopup('Bạn chưa nhập lý do hủy. Không thể hủy hóa đơn này!', 'Xin hãy kiểm tra lại.', 'error');
                return false;
            }
            else {
                alertPopup('Hủy thành công!', '', 'success');
                return true;
            }
        }
    </script>
}
