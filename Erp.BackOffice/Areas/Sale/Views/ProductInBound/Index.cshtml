<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.7.1/js/bootstrap-datepicker.min.js"></script>
@model IEnumerable<ProductInboundViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_ProductInBound;
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "ProductInbound",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
   
    var warehouseDestinationId = Request["warehouseDestinationId"] != null ? Request["warehouseDestinationId"] : "";
    IEnumerable<SelectListItem> warehouseList = (IEnumerable<SelectListItem>)ViewBag.warehouseList;
    //IEnumerable<SelectListItem> warehouseList = Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_WarehousebyDrugStore(warehouseDestinationId, "Kho nhận");
    string Status = Request["Status"] != null ? Request["Status"] : "";
    int rowNumber = 0;
    int numberOfItem = 30;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    var bug = Request["bug"];
}
<style type="text/css">
    .product-invoice-isdeleted {
        text-decoration: line-through;
    }
</style>

@if(bug != null)
{
    <script>
        alert('Fail');
        parent.ClosePopup();
    </script>
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <a class="btn btn-sm btn-info btn-xs" href="@Url.Action("UpdateLocationItem", new { Id = id })"><i class="fa fa-map-marker"></i></a>
    <a href="@Url.Action("Print", new { Id = id })" target="_blank" class="btn btn-primary btn-xs"><i class="fa fa-print"></i></a>
}

@helper GridColumnName(string name, int id)
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
    <a href="@Url.Action("Detail", "ProductInbound", new { Id = id, IsPopup = Request["IsPopup"] })">@name</a>
    @*<a href="javascript:;" onclick="OpenPopup('@Url.Action("View", "ProductInbound", new { Id = id, IsPopup = "true" })', 'Xem chi tiết phiếu nhập', 1000, 500)">@name</a>*@
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("txtCode", Request["txtCode"], new { @class = "", autocomplete = "off", placeholder = "Mã phiếu nhập..." })
        @Html.TextBox("txtProductCode", Request["txtProductCode"], new { @class = "", autocomplete = "off", placeholder = "Mã sản phẩm..." })
        <span class="input-daterange input-group">
            @Html.TextBox("startDate", Request["startDate"] != null ? Request["startDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Từ ngày" })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("endDate", Request["endDate"] != null ? Request["endDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Đến ngày" })
        </span>
        <script>

                          $('.input-daterange').datepicker({format:'dd/mm/yyyy'}).on('changeDate', function (e) {

                          });
        </script>   
        @Html.TextBox("txtPurchaseOrder", Request["txtPurchaseOrder"], new { @class = "", autocomplete = "off", placeholder = "Mã đơn hàng..." })
        @Html.DropDownList("warehouseDestinationId", warehouseList,"Kho nhận",new Dictionary<string, object> { { "class", "" }, { "data-val-required", "Bắt buộc chọn." } })
        <select name="Status" id="Status">
            <option @(Status == "" ? "selected" : "") value="">Tất cả</option>
            <option @(Status == "delete" ? "selected" : "") value="delete">Đã hủy</option>
            <option @(Status == "pending" ? "selected" : "") value="pending">Chưa ghi sổ</option>
            <option @(Status == "complete" ? "selected" : "") value="complete">Đã ghi sổ</option>
        </select>
    </p>
}
@if (!isPopup)
{
    using (Html.BeginForm("Delete", "ProductInBound", FormMethod.Post))
    {
        <div class="table-responsive">
            @Html.Grid(Model).Columns(columns =>
        {
            columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
            {
                rowNumber++;

                return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
            });
            columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
            columns.Add(u => u.CreatedUserName).Titled("Người tạo").RenderValueAs(u => u.CreatedUserName);
            columns.Add().Titled("Mã chứng từ").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id)).SetWidth(150);
            columns.Add(u => u.Note).Titled("Ghi chú");
            columns.Add(u => u.TotalAmount).Titled(Wording.TotalAmount).Sortable(true).SetWidth(100).RenderValueAs(u => CommonSatic.ToCurrencyStr(u.TotalAmount,null)).Css("text-right");
            columns.Add(u => u.WarehouseDestinationName).Titled(Wording.WarehouseDestination).SetWidth(150);
            columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
            columns.Add(u => u.IsArchive).Titled("TT ghi sổ").Sanitized(false).Encoded(false).RenderValueAs(n => (n.IsArchive ? "<span style=\"color:green\"><b>Đã ghi sổ</b></span>" : "<span style=\"color:red\"><b>Chưa ghi sổ</b></span>")).SetWidth(90).Sortable(true);
        }).WithPaging(30).SetRowCssClasses(item =>(item.IsDeleted.HasValue && item.IsDeleted.Value ? "product-invoice-isdeleted" : ""))
        </div>

        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "ProductInBound", "Sale"))
            {
                <a class="btn btn-mini btn-primary" href="@Url.Action("Create", pageSetting.ModuleName)">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
            }
            @*<a class="btn btn-mini btn-primary" href="@Url.Action("UpdateData", pageSetting.ModuleName)">
                    <i class="ace-icon fa fa-refresh"></i>
                    @Wording.ReUpdate
                </a>*@
        }
    }
}
else
{
    if (Model != null)
    {
        <p>Tổng số: <b>@Erp.BackOffice.Helpers.Common.PhanCachHangNgan2(Model.Count())</b></p>
        if (Model.Count() > 0)
        {
            <div class="table-responsive">
                @Html.Grid(Model).Columns(columns =>
     {
         columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
         {
             rowNumber++;

             return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
         });
         columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
         columns.Add().Titled(Wording.Code).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id)).SetWidth(150);
         columns.Add(u => u.Note).Titled("Ghi chú");
         columns.Add(u => u.TotalAmount).Titled(Wording.TotalAmount).Sortable(true).SetWidth(100).RenderValueAs(u => Common.PhanCachHangNgan2(u.TotalAmount)).Css("text-right");
         columns.Add(u => u.WarehouseDestinationName).Titled(Wording.WarehouseDestination).SetWidth(150);
         columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
         columns.Add(u => u.IsArchive).Titled("TT ghi sổ").Sanitized(false).Encoded(false).RenderValueAs(n => (n.IsArchive ? "<span style=\"color:green\"><b>Đã ghi sổ</b></span>" : "<span style=\"color:red\"><b>Chưa ghi sổ</b></span>")).SetWidth(90).Sortable(true);
     }).WithPaging(30)
            </div>
        }
    }
}
@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>

    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
}