@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Areas.Cms.Models
@model MaterialOutboundViewModel

@{
    ViewBag.Title = "Xuất kho";

    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "MaterialOutbound",
        ActionName = "CreateFromRequest",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
    IEnumerable<SelectListItem> warehouseList = (IEnumerable<SelectListItem>)ViewBag.warehouseList;

    IEnumerable<InventoryMaterialViewModel> productList = (IEnumerable<InventoryMaterialViewModel>)ViewBag.materialList;
    IEnumerable<SelectListItem> warehouseSourceList = (IEnumerable<SelectListItem>)ViewBag.warehouseSourceList;
    //List<SelectListItem> warehouseDestinationList = ((IEnumerable<SelectListItem>)ViewBag.warehouseDestinationList).Where(item => Model.WarehouseSourceId.HasValue && item.Value != Model.WarehouseSourceId.Value.ToString()).ToList();
    //IEnumerable<SelectListItem> drugStoreList = Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_DepartmentAllNew(Model.BranchId, Wording.Empty);
}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
}
<style>
    .edit-view .control-group, .edit-view .form-group {
        border-top: 1px solid #dedede !important;
    }
</style>
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}

@using (Html.BeginForm_AceStyle((string)ViewBag.Title, "CreateFromRequest", "MaterialOutbound", null, FormMethod.Post, new { id = "CreateFromRequest", @class = "form-horizontal clearfix" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.RequestInboundId)
    @Html.HiddenFor(model => model.WarehouseDestinationId)
    <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
    <div class="row">
        <div class="col-sm-7">
            @if (Model.WarehouseSourceId != null && Model.WarehouseSourceId > 0)
            {
                <div class="product-search-box top-10">
                    <input id="product_barcode" type="text" placeholder="Mã sản phẩm..." autocomplete="off" style="width:300px" />
                    <select id="productSelectList" name="productSelectList" style="width:400px">
                        <option value="">- Tìm sản phẩm -</option>
                        @foreach (var item in productList)
                        {
                            <option value="@item.Id" data-selected="0" data-value="@item.Id | @(Common.KiemTraTonTaiHinhAnh(item.Image_Name,"product-image-folder","product")) | @(item.MaterialCode + " - " + item.MaterialName + " (Lô:"+item.LoCode+"-HSD:"+(item.ExpiryDate==null?"":item.ExpiryDate.Value.ToShortDateString())+"-Tồn kho: " + Common.PhanCachHangNgan2(item.Quantity) + ")")" data-code="@item.MaterialCode" data-lo-code="@item.LoCode" data-expiry-date="@item.ExpiryDate" data-product-type="@item.CategoryCode" data-price="@(item.MaterialPriceOutbound)" data-unit="@item.MaterialUnit" data-product-id="@item.MaterialId" data-quantity-inventory="@item.Quantity">@item.MaterialName</option>
                        }
                    </select>
                </div>

                <div id="listOrderDetail" class="table-responsive top-10">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th style="width:5%">STT</th>
                                <th>Tên vật tư</th>
                                <th class="detail_locode">Lô/Hạn SD</th>
                                <th style="width:10%">Số lượng</th>
                                <th style="width:15%">Đơn giá</th>
                                <th style="width:15%">Thành tiền</th>
                                <th style="width:50px;"></th>
                            </tr>
                        </thead>
                        <tbody class="detailList">
                            @if (Model.DetailList.Count > 0)
                            {
                                foreach (var item in Model.DetailList)
                                {
                                    @Html.Partial("LoadProductItem", item);
                                }
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td>
                                    <input style="width:30px;" autocomplete="off" data-val="true" data-val-number="The field Sản phẩm đã chọn must be a number." data-val-required="Bắt buộc nhập" id="ProductItemCount" maskformat="" name="ProductItemCount" placeholder="" type="text" value="" readonly="readonly" />
                                </td>
                                <td colspan="2" class="red"><span id="status"></span></td>
                                <td id="TongSoLuong" align="right" style="font-weight:bold"></td>
                                <td></td>
                                <td id="TongThanhTien" align="right" style="font-weight:bold"></td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                    <span style="color:red" class="field-validation-valid help-inline" data-valmsg-for="ProductItemCount" data-valmsg-replace="true"></span>
                </div>
            }
        </div>
        <div class="col-sm-5">
            <div class="widget-box" id="widget-box-1">
                <div class="widget-header">
                    <h5 class="widget-title">Thông tin khởi tạo</h5>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        @if (Model.WarehouseSourceId == null)
                        {
                            <div class="alert alert-danger">
                                <button type="button" class="close" data-dismiss="alert">
                                    <i class="ace-icon fa fa-times"></i>
                                </button>

                                <strong>
                                    <i class="ace-icon fa fa-times"></i>
                                    Thông báo!
                                </strong>

                                @*<div class="detail_list_product">*@
                                Chọn kho nguồn để thêm sản phẩm
                                @*</div>*@
                                <br>
                            </div>
                        }
                        @*@Html.CustomDropDownListFor(model => model.BranchId, drugStoreList, WidthType.span4, true, null, DropdownListStyle.DropdownListStyleChosen)*@
                        @*@Html.CustomTextboxFor(model => model.RequestInboundId, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12" }, { "readonly", "readonly" } })*@
                        @Html.CustomDropDownListFor(model => model.WarehouseSourceId, warehouseSourceList, WidthType.span12, true, "- Chọn kho -", DropdownListStyle.DropdownListStyleDefault)
                        @*@Html.ModulePopupFor(m => m.CreatedStaffId, "Staffs", Model.CreatedStaffName, false, false, false, null, null, "Search")*@
                        @Html.CustomTextboxFor(model => model.requestInboundViewModel.ShipName, null, null, WidthType.span12)
                        @Html.CustomTextboxFor(model => model.requestInboundViewModel.ShipPhone, null, null, WidthType.span12)
                        @*@Html.DateTimePicker(model => model.CreatedDate, "dd/MM/yyyy H:mm", "00/00/0000 00:00:00", true, false)*@
                        @Html.CustomTextAreaFor(model => model.Note, null, WidthType.span12)
                        @Html.CustomTextboxFor(model => model.TotalAmount, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 numberinput2" }, { "disabled", "disabled" } })

                    </div>
                </div>
            </div>
        </div>
    </div>

    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" id="Save" name="Save" value="Save">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </a>
    }
}

@section Scripts {

    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")

    <link href="/Scripts/RadCombobox_v1/RadComboBoxLite.css" rel="stylesheet" />
    <script src="/Scripts/RadCombobox_v1/rabCombobox.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            LoadNumberInput();
            calcTotalAmount();
            $('#Save').click(function () {
                ShowLoading();
                var WarehouseSourceId = $("#WarehouseSourceId").val();
                var messagge = "";
                if ($(".group_choice :checked").val() == "internal") {
                    var warehouseDestinationId = $("#WarehouseDestinationId").val();
                    if (warehouseDestinationId == '') {
                        messagge += "Kho nhận sản phẩm chưa có <br>";
                    }
                }
                if (WarehouseSourceId == '') {
                    messagge += "Kho xuất sản phẩm chưa có <br>";
                }
                if (messagge != '') {
                    alertPopup('Lỗi!', messagge, 'error');
                    HideLoading();
                }
                else {
                    ClearFormatBeforeSubmit($("#CreateFromRequest"));
                    $("#CreateFromRequest").submit();
                    //  HideLoading();
                }

            });
            var countItem = $('.detailList tr.detail_item').length;
            $('#ProductItemCount').val(countItem);
            $("#WarehouseSourceId").change(function () {
                ShowLoading();
                var requestInboundId = $("#RequestInboundId").val();
                window.location = "/MaterialOutbound/CreateFromRequest/?WarehouseSourceId=" + $(this).val() + "&RequestInboundId=" + requestInboundId + "&IsPopup=true";
            });

            //init rcb chọn sản phẩm
            $('#productSelectList').radComboBox({
                colTitle: 'ID, Hình, Tên sản phẩm',
                colValue: 1,
                colImage: 2,
                colHide: '1',
                colSize: '0px,50px,',
                colClass: ',,',
                //width: 600,
                height: 300,
                boxSearch: true,
                colSearch: 2
            });

            //$('#TotalAmount').numberFormat();
            //$('.detail_item_price').numberFormat('before');
            //$('#PaymentViewModel_Amount').val('0').numberFormat();
            $("#ProductItemCount").attr("readonly", "true");

            //Hiển thị giá và tính thành tiền khi chọn sản phẩm
            $('#productSelectList').on('change', function () {
                var $this = $(this);
                var selected = $this.find("option:selected");

                if (selected.val() == '' || $('#product_item_' + selected.val()).length > 0)
                    return;

                var OrderNo = $('.detailList tr.detail_item').length;
                var MaterialId = selected.data("product-id");
                var MaterialName = selected.text();
                var Unit = selected.data("unit");
                var Quantity = 1;
                var Price = selected.data("price");
                var MaterialType = selected.data("product-type");
                var MaterialCode = selected.data("code");
                var QuantityInventory = selected.data("quantity-inventory");
                var WarehouseId = $("#WarehouseSourceId").find("option:selected").val();
                var LoCode = selected.data("lo-code");
                var ExpiryDate = selected.data("expiry-date");
                var formdata = {
                    OrderNo: OrderNo,
                    MaterialId: MaterialId,
                    MaterialName: MaterialName,
                    Unit: Unit,
                    Quantity: Quantity,
                    Price: Price,
                    MaterialType: MaterialType,
                    MaterialCode: MaterialCode,
                    QuantityInventory: QuantityInventory,
                    WarehouseId: WarehouseId,
                    LoCode: LoCode,
                    ExpiryDate: ExpiryDate
                };

                //Thêm dòng mới
                ClickEventHandler(true, "/MaterialOutBound/LoadProductItem", ".detailList", formdata, function () {
                    $('#ProductItemCount').val($('#listOrderDetail .detailList tr.detail_item').length);
                    //$('#DetailList_' + OrderNo + '_Price').numberFormat();
                    //$('#DetailList_' + OrderNo + '__Quantity').numberOnly();
                    $("#DetailList_" + OrderNo + "__Quantity").focus().select();
                    $.mask.definitions['~'] = '[+-]';
                    $('.input-mask-date').mask('99/99/9999');
                    var _product_id = $("#DetailList_" + OrderNo + "__MaterialId").val();
                    var _LoCode = $("#DetailList_" + OrderNo + "__LoCode").val();
                    var _ExpiryDate = $("#DetailList_" + OrderNo + "__ExpiryDate").val();
                    var _quantity_inventory = $("#DetailList_" + OrderNo + "__Quantity").data("quantity-inventory");
                    var _qty = $("#DetailList_" + OrderNo + "__Quantity").val();
                    var selector = '.detailList tr';
                    var quantity_used = 0;
                    $(selector).each(function (index, elem) {
                        if (index != OrderNo) {
                            var product_id = $("#DetailList_" + index + "__ProductId").val();
                            var LoCode = $("#DetailList_" + index + "__LoCode").val();
                            var ExpiryDate = $("#DetailList_" + index + "__ExpiryDate").val();
                            var Quantity = $("#DetailList_" + index + "__Quantity").val();
                            if (product_id == _product_id && LoCode == _LoCode && ExpiryDate == _ExpiryDate) { // la số thì mới tính
                                quantity_used += parseInt(removeComma(Quantity));
                            }
                        }
                    });
                    var inventory_qty = parseInt(_quantity_inventory) - parseInt(quantity_used);
                    var _quantity = parseInt(removeComma(_qty));
                    $("#status").text("");
                    if (_quantity > inventory_qty) {
                        $("#DetailList_" + OrderNo + "__Quantity").val(inventory_qty);
                        $("#status").text("Tổng số lượng xuất ra không được lớn hơn số lượng tồn kho hiện tại!!");
                    }
                    calcAmountItem(OrderNo);
                    calcTotalAmount();
                });
            });

            $('#listOrderDetail').on('focus', '.detail_item_price', function () {
                $(this).select();
            });

            $('#listOrderDetail').on('focus', '.detail_item_qty', function () {
                $(this).select();
            });

            // tính thành tiền và tổng cộng
            $('#listOrderDetail').on('change', '.detail_item_qty', function () {
                $(this).val($(this).val().replace(/\-/g, ''));
                $(this).val($(this).val().replace(/[^0-9.,]/g, ''));
                var ralVal = numeral($(this).val());
                if (ralVal <= 0) {
                    $(this).val(1);
                }
                var $this = $(this);
                var id = $this.closest('tr').data('id');
                var _product_id = $("#DetailList_" + id + "__ProductId").val();
                var _LoCode = $("#DetailList_" + id + "__LoCode").val();
                var _ExpiryDate = $("#DetailList_" + id + "__ExpiryDate").val();
                var _quantity_inventory = $(this).data("quantity-inventory");
                var selector = '.detailList tr';
                var quantity_used = 0;
                $(selector).each(function (index, elem) {
                    if (index != id) {
                        var product_id = $("#DetailList_" + index + "__ProductId").val();
                        var LoCode = $("#DetailList_" + index + "__LoCode").val();
                        var ExpiryDate = $("#DetailList_" + index + "__ExpiryDate").val();
                        var Quantity = $("#DetailList_" + index + "__Quantity").val();
                        if (product_id == _product_id && LoCode == _LoCode && ExpiryDate == _ExpiryDate) { // la số thì mới tính
                            quantity_used += parseInt(removeComma(Quantity));
                        }
                    }
                });
                var inventory_qty = parseInt(_quantity_inventory) - parseInt(quantity_used);
                var _quantity = parseInt(removeComma($(this).val()));
                $("#status").text("");
                if (_quantity > inventory_qty) {
                    $("#DetailList_" + id + "__Quantity").val(inventory_qty);
                    $("#status").text("Tổng số lượng xuất ra không được lớn hơn số lượng tồn kho hiện tại!!");
                }
                //tính tổng cộng
                calcAmountItem(id);
                calcTotalAmount();
            });

            $('#listOrderDetail').on('change', '.detail-product-price .detail_item_price:not(.mask-format-currency)', function () {
                $(this).val($(this).val().replace(/\-/g, ''));
                $(this).val($(this).val().replace(/[^0-9.,]/g, ''));
                var ralVal = numeral($(this).val());
                if (ralVal <= 0) {
                    $(this).val(1);
                }
                var $this = $(this);
                var id = $this.closest('tr').data('id');
                calcAmountItem(id, 'price');
                calcTotalAmount();
            });

            $('#listOrderDetail').on('keypress', '.detail-product-price, .detail_item_qty', function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                }
            });

            $('#product_barcode').keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                    $('#product_barcode').trigger('change');
                }
            });

            //khi nhập barcode
            $('#product_barcode').change(function () {
                var $this = $(this);
                if ($this.val() != '') {

                    var barcode = $this.val();
                    //đặt lại giá trị rỗng
                    $this.val('').focus();

                    var valueSearch = searchProductByBarCodeContain(barcode);
                    if (valueSearch == undefined) {
                        alert('Không tìm thấy sản phẩm với mã code trên!');
                        return;
                    }

                    $('#productSelectList').val(valueSearch).trigger("change");
                }
            });

            // xóa sản phẩm
            $('#listOrderDetail').on('click', '.btn-delete-item', function () {
                //$(this).closest('tr').next('tr.template_location').remove();
                $(this).closest('tr').remove();

                var countItem = $('.detailList tr.detail_item').length;
                $('#ProductItemCount').val(countItem);

                if (countItem == 0) {
                    $('#ProductItemCount').val('');
                    $('#TongSoLuong').text('');
                    $('#TongThanhTien').text('');
                }
                calcTotalAmount();

                $('.detailList tr.detail_item').each(function (index, tr) {
                    $(tr).attr('role', index);
                    $(tr).find('td:first-child').text(index + 1);

                    $(tr).find('.detail-locode input').attr('name', 'DetailList[' + index + '].LoCode').attr('id', 'DetailList_' + index + '__LoCode');
                    $(tr).find('.detail-locode input').attr('name', 'DetailList[' + index + '].ExpiryDate').attr('id', 'DetailList_' + index + '__ExpiryDate');

                    $(tr).find('.detail_item_id input').attr('name', 'DetailList[' + index + '].ProductId').attr('id', 'DetailList_' + index + '__ProductId');
                    $(tr).find('.detail_item_qty').attr('name', 'DetailList[' + index + '].Quantity').attr('id', 'DetailList_' + index + '__Quantity');
                    $(tr).find('.detail_item_price').filter(':not(.mask-format-currency)').attr('name', 'DetailList[' + index + '].Price').attr('id', 'DetailList_' + index + '__Price');
                    $(tr).find('.detail_item_unit').attr('name', 'DetailList[' + index + '].Unit');
                });
            });
        });

        function selectLocationItem(id, LoCode, Floor, ExpiryDate, Shelf, SN, orderNo) {
            $("#LocationItemList_" + orderNo + "__Id").val(id);
            $("#LocationItemList_" + orderNo + "__SN").val(SN);
            $("#LocationItemList_" + orderNo + "__Shelf").val(Shelf);
            $("#LocationItemList_" + orderNo + "__Floor").val(Floor);
            $("#LocationItemList_" + orderNo + "__LoCode").val(LoCode);
            $("#LocationItemList_" + orderNo + "__ExpiryDate").val(ExpiryDate);
            ClosePopup();
        };

        function searchProductByBarCodeContain(barcode) {
            barcode = barcode.toLowerCase();
            //var $productSelect = $('.detail_item_id').first();

            var $optionList = $("#productSelectList").find('option');

            var arrResulft = [];
            for (var i = 0; i < $optionList.length; i++) {
                var data_code = $($optionList[i]).data('code') != undefined ? $($optionList[i]).data('code').toString().toLowerCase() : undefined;
                if (barcode.indexOf(data_code) != -1)
                    arrResulft.push($($optionList[i]).attr('value'));

                if (arrResulft.length == 1) {
                    return arrResulft[0];
                }
            }

            return arrResulft[0];
        };

        function calcAmountItem(id, priceFrom) {
            var input_price = $('#DetailList_' + id + '__Price');
            var _price = input_price.val() != '' ? removeComma(input_price.val()) : 0;

            // $('tr#product_item_' + id).find('.detail_item_price').text(currencyFormat(price));
            var $qty = $('tr#product_item_' + id).find('.detail_item_qty');
            var qty = 1;
            if ($qty.val() == '') {
                $qty.val(1);
            } else {
                qty = parseInt(removeComma($qty.val())) < 0 ? parseInt(removeComma($qty.val())) * -1 : parseInt(removeComma($qty.val()));
            }
            var total = parseFloat(_price) * qty;
            $('tr#product_item_' + id).find('.detail_item_total').text(numeral(total).format('0,0'));
        };

        function calcTotalAmount() {
            var total = 0;
            var total1 = 0;

            var selector = '.detailList tr.detail_item.detail_item';
            $(selector).each(function (index, elem) {
                if ($(elem).find('.detail_item_total').text() != '') { // la số thì mới tính
                    total += parseFloat(removeComma($(elem).find('.detail_item_total').text()));
                    $("#TongThanhTien").text(numeral(total).format('0,0'));

                }
                console.log($(elem).find('.detail_item_qty').val());
                if ($(elem).find('.detail_item_qty').val() != '') { // la số thì mới tính
                    total1 += parseInt($(elem).find('.detail_item_qty').val().replace(/\-./g, ''));
                    $("#TongSoLuong").text(currencyFormat(total1));
                }

                if (index == $(selector).length - 1) {
                    $('#mask-TotalAmount').val(numeral(total).format('0,0'));
                    $('#TotalAmount').val(numeral(total).format('0,0'));
                }
            });
        };

        function checkChosenProductOnTable() {
            var flag = true;
            if ($('#PurchaseOrderId').val() == '') {
                $('.detailList select.detail_item_id').each(function (index, elem) {
                    if ($(elem).val() == '') {
                        var message = $(elem).data('val-required') != undefined ? $(elem).data('val-required') : 'Chưa chọn sản phẩm!';
                        $(elem).next('span').text(message);
                        flag = false;
                    }
                });
            }
            return flag;
        };

        //hàm gọi lại từ form tạo mới phiếu nhập
        function ClosePopupAndAppendSelectPurchaseOrder(optionSelect) {
            ClosePopup(false);
            $('#PurchaseOrderId').append($(optionSelect)).trigger("chosen:updated");
        };

        function parseValidatorForm(form) {
            //jQuery.noConflict();

            // if the form is in a dialog box {
            var form = $(form);
            form.removeData('validator').removeData('nobtrusiveValidation');
            $.validator.unobtrusive.parse(form); // }

            $.fn.extend({
                // form validation {
                isValid: function () {
                    var self = $(this);
                    $.validator.unobtrusive.parse(self);
                    return self.data('unobtrusiveValidation').validate();
                } // }
            });
        };
        $(".group_choice").change(function () {
            ShowLoading();
            $(".group_choice_wrap").css('height', 'initial');
            if ($(this).is(":checked")) {
                $(".group_choice_wrap").hide();
                $($(this).data("target")).show();
            }
            HideLoading();
        });

    </script>
}
