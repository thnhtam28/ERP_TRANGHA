@model IQueryable<TaskViewModel>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.7.1/css/bootstrap-datepicker.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.7.1/js/bootstrap-datepicker.min.js"></script>


@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Crm.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_Task;
    bool isPopup = Request["popup"] != null && Request["popup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Task",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        <span class="input-daterange input-group">
            @Html.TextBox("StartDate", Request["StartDate"] != null ? Request["StartDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Từ ngày..." })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("EndDate", Request["EndDate"] != null ? Request["EndDate"] : "", new { @class = "", autocomplete = "off", placeholder = "Đến ngày..." })


        </span>
        @*<span class="input-daterange input-group">
           
           
        </span>*@
        @Html.DropDownList("status", SelectListHelper.GetSelectList_Category("task_status", Request["status"], "Value", null), "Trạng thái")
        @Html.DropDownList("Priority", SelectListHelper.GetSelectList_Category("task_priority", Request["Priority"], "Value", null), "Độ ưu tiên")
        @Html.DropDownList("CreateId", SelectListHelper.GetSelectList_User(Request["CreateId"], null), "Người giao việc")
        @Html.DropDownList("AssignId", SelectListHelper.GetSelectList_User(Request["AssignId"], null), "Người nhận việc")
    </p>
}
@helper GridColumnStatusName(string status)
{
    switch (status)
    {
        case "pending":
            <span class="label label-info">@Wording.pending</span>
            break;
        case "inprogress":
        <span class="label label-warning">@Wording.inprogress</span>
            break;
        case "completed":
        <span class="label label-success">@Wording.completed</span>
            break;
        case "cancel":
        <span class="label label-danger">@Wording.Cancel</span>
            break;
    }
}
@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}
<style>
    .popover {
        max-width: 350px !important;
    }
</style>
<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{

    <p>
        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("UpdateTask", "Task", "Crm"))
        {
            <a class="btn btn-mini btn-success" href="@Url.Action("UpdateTask","Task", new { Id = id })">
                <i class="ace-icon fa fa-edit"></i>
            </a>
        }
        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Task", "Crm"))
        {
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        }
    </p>

}

@helper GridColumnName(string name, int id, bool isPopup)
{
    if (isPopup)
    {
        <a onclick="parent.selectBranchItem(@id)">@name</a>
    }
    else
    {
        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a onclick="OpenPopup('@Url.Action("Detail", "Task", new { Id = id,IsPopup = true })','Chi tiết công việc',1000, 400)">@name</a>
    }
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@if (!isPopup)
{
    using (Html.BeginForm("Delete", "Task", FormMethod.Post))
    {
        @Html.Grid(Model).Columns(columns =>
        {
            columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add(u => u.Status).Titled(Wording.Status).Sortable(true).SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnStatusName(u.Status));
            columns.Add(u => u.Subject).Titled(Wording.Subject).Sortable(true).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Subject, u.Id, isPopup));
            //columns.Add(u => u.CreatedUserId).Titled(Wording.CreatedUserId).SetWidth(100).RenderValueAs(u => u.CreatedUserName);
            columns.Add(u => u.FullName).Titled("Người giao việc").SetWidth(150);
            columns.Add(u => u.ReceiverName).Titled("Người nhận việc").SetWidth(150);
            columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(100);
            //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
            columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(100).Sortable(true);
            columns.Add(u => u.StartDate).Titled("Ngày bắt đầu").SetWidth(100).Sortable(true);
            columns.Add(u => u.Id).Titled("").Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(100);
        }).WithPaging(10)
        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "Task", "Crm"))
            {
                <a class="btn btn-mini btn-primary" href="@Url.Action("Create","Task")">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
            }
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Task", "Crm"))
            {
                <button class="btn btn-mini btn-danger" type="submit" name="DeleteAll" value="DeleteAll" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash"></i>
                    @Wording.Delete
                </button>
            }
        }
    }

}
else
{
    @Html.Grid(Model).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Subject).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Subject, u.Id, isPopup));
    }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })
        $(document).ready(function () {
            $('[data-rel=popover]').popover({ html: true });
        });


        $('.input-daterange').datepicker({ format: 'dd/mm/yyyy' }).on('changeDate', function (e) {

        });
        //function UpdateNote(Id) {
        //	var note = $("#Note_" + Id).val();
        //	var status = $("#Status_" + Id).val();

        //	$.ajax({
        //		url: '/Task/UpdateNote',
        //		type: 'GET',
        //		data: { Id: Id, note: note, status: status },
        //		success: function (res) {
        //			if (res == "success") {
        //				alertPopup("Thông báo", "Cập nhật ghi chú thành công! Trang web sẽ tự động load lại sau 2s", "success");
        //				setInterval(function () {
        //					window.location.reload();
        //				}, 2000);
        //			} else {
        //				alertPopup("Lỗi", "Cập nhật ghi chú thất bại!", "danger");
        //			}
        //		}
        //	});

        //};
        //function EditNote() {
        //	$('[data-rel=popover]').popover('hide');
        //}
        //function Create() {
        //    $('[data-rel=popover]').popover('show');
        //}

        $('.class-delete-all').on('click', function () {
            if ($('.class-delete-all:checked').length == $('.class-delete-all').length) {
                $('#checkAll').prop('checked', true);
            } else {
                $('#checkAll').prop('checked', false);
            }
        })

        $('.grid-header').mouseover(function () {
            $('.grid-header')[0].title = "Chọn tất cả";
        });
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/mm/yyyy")
    @Html.ScriptBottom_ChosenStyle()
}
