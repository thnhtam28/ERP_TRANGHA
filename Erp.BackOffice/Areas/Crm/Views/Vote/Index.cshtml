@model List<vwVoteViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Crm.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = Wording.PageIndex_Vote;
        bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
        if (isPopup)
        {
            Layout = "~/Views/Shared/_PopupLayout.cshtml";
        }
        else
        {
            Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        }

        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "Vote",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = true,
            IsPopup = false,
            DisplayBackButton = false
        };
        string branch = (string.IsNullOrEmpty(Request["BranchId"]) == false ? Request["BranchId"] : "0");
    }

    <link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>



    @helper GridColumnName(string name, int id, bool isPopup)
        {
            if (isPopup)
            {
                <a onclick="parent.selectBranchItem(@id)">@name</a>
            }
            else
            {
                name = string.IsNullOrEmpty(name) ? "No Title" : name;

                <a onclick="OpenPopup('@Url.Action("Detail", "Vote", new { UsingServiceLogDetailId = id,IsPopup=true })', '@Wording.PageDetail_Vote', 0, 700)">@name</a>
            }
}
    @using (Html.BeginPageHeaderContainer(pageSetting))
    {
        <p>
            <span class="input-daterange input-group">
                @Html.TextBox("start_date", Request["start_date"] != null ? Request["start_date"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "Ngày đánh giá từ..." })
                <span class="input-group-addon">
                    <i class="fa fa-exchange"></i>
                </span>
                @Html.TextBox("end_date", Request["end_date"] != null ? Request["end_date"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "đến..." })
            </span>
            @Html.DropDownList("BranchId", SelectListHelper.GetSelectList_BranchAll(branch, Wording.BranchName), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
            @Html.TextBox("ProductInvoiceCode", Request["ProductInvoiceCode"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.ProductInvoiceCode + "..." })
            @Html.TextBox("StaffName", Request["StaffName"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.NameStaff + "..." })
            @Html.TextBox("CustomerName", Request["CustomerName"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.CustomerName + "..." })
        </p>
    }

    @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }
    <div class="table-responsive">
        @Html.Grid(Model).Columns(columns =>
                  {
                      columns.Add().Titled(Wording.CreatedDate).SetWidth(150).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.CreatedDate.Value.ToString("dd/MM/yyyy HH:mm"), u.UsingServiceLogDetailId.Value, isPopup));
                      columns.Add(u => u.CustomerCode).Titled(Wording.CustomerCode).SetWidth(100);
                      columns.Add(u => u.CustomerName).Titled(Wording.CustomerName).SetWidth(200);
                      columns.Add(u => u.ServiceName).Titled(Wording.ServiceName);
                      columns.Add(u => u.StaffName).Titled(Wording.NameStaff).SetWidth(200);
                      columns.Add(u => u.StaffCode).Titled(Wording.CodeStaff).SetWidth(100);
                      columns.Add(u => u.ProductInvoiceCode).Titled(Wording.ProductInvoiceCode).SetWidth(100);
                      columns.Add(u => u.BranchName).Titled(Wording.BranchName).SetWidth(100);
                  }).WithPaging(10)
    </div>
    @section Scripts {
        @Html.ScriptBottom_ValidationMvc()
        @Html.ScriptBottom_DatePicker("dd/mm/yyyy")
    }