@model  IEnumerable<TaskViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Crm.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html
@using Erp.BackOffice.Areas.Cms.Models
@{
    Layout = null;
    List<CategoryViewModel> Category = (List<CategoryViewModel>)ViewBag.Category;
    var quantityDate = Erp.BackOffice.Helpers.Common.GetSetting("quantity_Reminder_Date");
    var date = DateTime.Now.AddDays(Convert.ToInt32(quantityDate));
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCategoryValue(string value)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}
@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()

}
<style>
    .popover {
        max-width: 350px !important;
    }
    .badge, .badge-red.label {
    position: initial !important;
}
</style>

@helper GridColumnStatus(DateTime? StartDate, DateTime? DueDate, DateTime? ReminderDate, string Status)
{
    var mau = "";
    if (Status == "pending" || Status == "inprogress")
    {

        if (DateTime.Now <= DueDate && DueDate <= ReminderDate)
        {
            mau = "#F89406";
        }
        if (DueDate < DateTime.Now)
        {
            mau = "#d15b47";
        }
    }
    else
    {
        mau = "black";
    }
    <p style="color:@mau">
        <i class="ace-icon fa fa-calendar-check-o bigger-120"></i>
        @StartDate.Value.ToString("dd/MM/yyyy HH:mm")
    </p>

    <p style="color:@mau">
        <i class="ace-icon fa fa-calendar-times-o  bigger-120"></i>
        @DueDate.Value.ToString("dd/MM/yyyy HH:mm")
    </p>
}
@helper GridColumnCommand(int id, string Subject)
{
    <span><a onclick="OpenPopup('@Url.Action("UpdateTask", "Task", new { area="Crm",Id=id, IsPopup = true })', 'Cập nhật công việc', 900, 500)">@Subject</a></span>
}

<div class="widget-container-col ui-sortable" id="widget-container-col-10" style="min-height: 108px;">
    <div class="widget-box ui-sortable-handle" id="widget-box-10" style="opacity: 1;">
        <div class="widget-header widget-header-small">
            <h5 class="widget-title smaller"><i class="fa fa-bars"></i> DS công việc</h5>

            <div class="widget-toolbar no-border">
                <ul class="nav nav-tabs" id="myTab">
                    @for (int i = 0; i < Category.Count(); i++)
                    {
                        var total = Model.Where(x => x.Status == Category[i].Value).ToList().Count();
                        <li id="li_category_@i">
                            <a data-toggle="tab" href="#tab_List_Task_@i"><i class="@Category[i].Description"></i> @Category[i].Name <span class="badge badge-danger">@total</span></a>
                        </li>
                    }
                    @*<li class="">
                            <a data-toggle="tab" href="#profile" aria-expanded="false"><i class="fa fa-tasks"></i> Đang xử lý <span class="badge badge-warning">@TaskInprogress.Count() </span></a>
                        </li>*@
                </ul>
            </div>
        </div>

        <div class="widget-body">
            <div class="widget-main padding-6">
                <div class="tab-content">
                    @for (int i = 0; i < Category.Count(); i++)
                    {
                        var list = Model.Where(x => x.Status == Category[i].Value).ToList();
                        <div id="tab_List_Task_@i" class="tab-pane">
                            <div class="table-responsive">
                                @Html.Grid(list).Columns(columns =>
                                       {
                                           int index = 0;
                                           columns.Add().Titled(Wording.OrderNo).SetWidth(30).RenderValueAs(n => (++index).ToString());
                                           columns.Add(u => u.Id).Titled(Wording.Content).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id, u.Subject));
                                           columns.Add().Titled("Thời gian").SetWidth(140).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnStatus(u.StartDate, u.DueDate, date, u.Status));
                                       })
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>
<script>

    $(document).ready(function () {
        $('[data-rel=popover]').popover({ html: true });

    });
    function EditNote() {
        $('[data-rel=popover]').popover('hide');
    }
    $("#tabs").tabs();
    $(document).ready(function () {
        $('#li_category_0').addClass("active");
        $('#tab_List_Task_0').addClass("active");
    });
</script>