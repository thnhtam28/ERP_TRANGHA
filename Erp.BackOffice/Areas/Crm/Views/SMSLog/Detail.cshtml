@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers

@model Erp.BackOffice.Crm.Models.SMSLogViewModel
@{
    ViewBag.Title = Wording.PageDetail_SMSLog;

    if (ViewBag.layout == true)
    {
        Layout = null;
    }
    else
    {
        Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "SMSLog",
        ActionName = "Detail",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = false,
        AdvancedSearch = true,
    };
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}
@using (Html.BeginForm_AceStyle((string)ViewBag.Title, "SendSMS", "SMSLog", null, FormMethod.Post, new { @class = "form-horizontal" }))
{
    <div class="col-sm-12">
        <div class="detail-view col-xs-12 top-10">
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.TargetID)
            @Html.HiddenFor(model => model.TargetModule)
            <div class="row control-group">
                @Html.DetailViewItemFor2(model => model.Customer, null, null, "col-xs-3", "col-xs-9")
            </div>
            <div class="row control-group">
                @Html.DetailViewItemFor2(model => model.Phone, null, null, "col-xs-3", "col-xs-9")
            </div>
            <div class="row control-group">
                @Html.DetailViewItemFor2(model => model.SentDate, null, null, "col-xs-3", "col-xs-9")
            </div>
            <div class="row control-group">
                @Html.DetailViewItemFor2(model => model.Body, null, null, "col-xs-3", "col-xs-9")
                @*<div class="col-xs-3 control-label">
                        @Html.LabelFor(model => model.Body)
                    </div>
                    <div class="col-xs-9">
                        <textarea class="ckeditor" cols="30" id="Content" name="Content" placeholder="" rows="2">@Model.Body</textarea>
                    </div>*@
            </div>

        </div>
    </div>

    using (Html.BeginButtonContainer(pageSetting))
    {
        <input type="hidden" name="UrlReferrerDetail" value="@Request.UrlReferrer" />
        <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("SendSMS", "SMSLog", "Crm"))
        {
            <button class="btn btn-mini btn-primary" type="submit" name="Submit" value="Save">
                <i class="ace-icon fa fa-paper-plane"></i>
                @Wording.SendSMS
            </button>
        }
    }
}

@section Scripts {
    <link href="/Scripts/ckeditor/contents.css" rel="stylesheet" />
    <script src="/Scripts/ckeditor/ckeditor.js"></script>
    <script>
        @*var urlRefer = '@ViewBag.urlRefer';*@
        //truyền từ action create của controller qua khi thực hiện submit và return về lại view create, để nhận biết là được gọi theo dạng popup
        var closePopup = '@Request["closePopup"]';
        $(document).ready(function () {
            //nếu là được gọi theo dạng popup từ form khác thì chạy đoạn code bên dưới
            if (closePopup == 'true') {

                //tên funtion có thể khác theo từng công việc riêng (đây chỉ là mẫu khi thêm mới sẽ gọi lại)
                //nếu có url thì gọi hàm này để trang ngoài iframe nhảy trang
                //if (urlRefer != '') {
                //    window.parent.ClosePopupAndRedirectToURL(urlRefer);
                //}
                window.parent.ClosePopupAndDoSomething();
            }
        });
        $(document).ready(function () {
            $('[data-rel="tooltip"]').tooltip({ container: 'body' });

        });
        function initCkeditor() {
            $('.ckeditor').ckeditor({
                "extraPlugins": 'imagebrowser',
                "imageBrowser_listUrl": "@Url.Action("ListJson","Images")",
                // Define the toolbar groups as it is a more accessible solution.
                toolbarGroups: [
                    { "name": "document", "groups": ["mode", "document", "doctools"] },
                    { "name": "editing", "groups": ["find", "selection", "spellchecker"] },
                    { "name": "forms" },
                    { "name": "tools" },
                    { "name": "basicstyles", "groups": ["basicstyles", "cleanup"] },
                    { "name": "clipboard", "groups": ["clipboar", "undo"] },
                    { "name": "links", "groups": ["links"] },
                    { "name": "paragraph", "groups": ["list", "blocks"] },
                    { "name": "insert", "groups": ["insert"] },
                    { "name": "styles", "groups": ["styles"] },
                    //{ "name": "about", "groups": ["about"] },
                    { "name": "styles" },
                    { "name": "colors" },
                    { "name": "align", "groups": ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'] }

                ],
                // Remove the redundant buttons from toolbar groups defined above.
                removeButtons: 'Underline,Strike,Subscript,Superscript,Anchor,Styles,Specialchar'
            });
        }
    </script>
}