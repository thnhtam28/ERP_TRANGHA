@model List<MemberCardViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Account.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_MemberCard;
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "MemberCard",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    var path = Erp.BackOffice.Helpers.Common.GetSetting("Customer");
    var category = SelectListHelper.GetSelectList_Category("Type_materCard", null, "Value", null);
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>
<style>
    .itemdiv {
        min-height: 0px !important;
    }
</style>
@helper GridColumnCommand(int id)
{

    <p>
        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Edit", "MemberCard", "Account"))
        {
            <a class="btn btn-mini btn-success" href="@Url.Action("Edit", "MemberCard", new { Id = id })">
                <i class="ace-icon fa fa-edit"></i>
            </a>
        }
        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "MemberCard", "Account"))
        {
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        }
    </p>
}
@helper GridColumnStatusName(string status)
{
    switch (status)
    {
        case "pending":
            <span class="label label-info">@Wording.pending</span>
            break;
        case "released":
        <span class="label label-warning">Đã phát hành</span>
            break;
        case "inprogress":
        <span class="label label-success">Đang sử dụng</span>
            break;
        case "cancel":
        <span class="label label-danger">@Wording.Cancel</span>
            break;
    }
}

@helper GridColumnDateName(DateTime? CreateDate, DateTime? DateOfIssue)
{
    <p data-toggle="tooltip" title="Ngày sử dụng thẻ"><i class="fa fa-calendar-check-o"></i> @(DateOfIssue.HasValue ? DateOfIssue.Value.ToString("dd/MM/yyyy HH:mm") : "chưa có")</p>
    <p data-toggle="tooltip" title="Ngày tạo thẻ">
        <i class="fa fa-calendar-plus-o"></i> @CreateDate.Value.ToString("dd/MM/yyyy HH:mm")
    </p>
}
@helper GridColumnInfoCreateName(string BranchName, string CreateUserName)
{
    <p data-toggle="tooltip" title="Chi nhánh">
        <i class="fa fa-university "></i> @BranchName
    </p>
    <p data-toggle="tooltip" title="Người cấp thẻ"><i class="fa fa-user-plus "></i> @CreateUserName</p>
}

@helper GridColumnCodeName(string Code, string Type, SelectList list)
{
    <p data-toggle="tooltip" title="Mã thẻ">
        <i class="fa fa-barcode"></i> @Code
    </p>
    <p data-toggle="tooltip" title="Loại thẻ"><i class="fa fa-credit-card-alt"></i> @list.Where(x => x.Value == Type).FirstOrDefault().Text</p>
}

@helper GridColumnName(string name, int id, bool isPopup, string CustomerName, string CustomerCode, string ImagePath, string Status)
{
    if (isPopup)
    {
        <a onclick="parent.selectBranchItem(@id)">@name</a>
    }
    else
    {
        <div class="itemdiv commentdiv">

            <div class="user">
                <img alt="@CustomerName" src="@ImagePath">
            </div>
            <div class="body">
                <div class="name" data-toggle="tooltip" title="Tên khách hàng">
                    @CustomerCode - @CustomerName
                </div>
                <div class="text" data-toggle="tooltip" title="Tình trạng thẻ">
                    @GridColumnStatusName(Status)
                </div>
            </div>

        </div>
        @*name = string.IsNullOrEmpty(name) ? "No Title" : name;
            <a href="@Url.Action("Edit", "MemberCard" , new { Id= id })">@name</a>*@
    }
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("Code", Request["Code"], new { autocomplete = "off", placeholder = "Mã đơn hàng" })
        @Html.DropDownList("BranchId", SelectListHelper.GetSelectList_Branch(Request["BranchId"], Wording.BranchName), new Dictionary<string, object> { { "data-val-required", "Bắt buộc chọn." } })
        @Html.DropDownList("Status", SelectListHelper.GetSelectList_Category("member_card_status", Request["Status"], "Value", Wording.Status), new Dictionary<string, object> { { "data-val-required", "Bắt buộc chọn." } })
    </p>
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

@if (!isPopup)
{

    using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
    {
        @Html.Grid(Model).Columns(columns =>
    {
        columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().CustomerId).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id, isPopup, u.CustomerName, u.CustomerCode, u.ImagePath, u.Status));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Code).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCodeName(u.Code, u.Type, category));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().DateOfIssue).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnDateName(u.CreatedDate, u.DateOfIssue));
        columns.Add().Titled(Wording.BranchName).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnInfoCreateName(u.BranchName, u.CreateUserName));
        columns.Add().Titled(Wording.Action).SetWidth(20).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id));
    }).WithPaging(10)

        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "MemberCard", "Account"))
            {
                <a class="btn btn-primary btn-mini" href="@Url.Action("Create", pageSetting.ModuleName)">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
            }
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "MemberCard", "Account"))
            {
                <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                    @Wording.Delete
                </button>
            }
        }
    }
}
else
{
    @Html.Grid(Model).Columns(columns =>
   {
       columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
       columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().CustomerName).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id, isPopup, u.CustomerName, u.CustomerCode, u.ImagePath, u.Status));
       columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Code).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCodeName(u.Code, u.Type, category));
       columns.Add().Titled(Wording.BranchName).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnInfoCreateName(u.BranchName, u.CreateUserName));
       columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().DateOfIssue).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnDateName(u.CreatedDate, u.DateOfIssue));
   }).WithPaging(10)
}
@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>
    @Html.ScriptBottom_ValidationMvc()

}
