@model IQueryable<PaymentViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Account.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_Payment;
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Payment",
        ActionName = "List",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    @*<div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">*@
    <p>
       
        <a href="@Url.Action("Print", new { Id = id })" target="_blank" class="btn btn-primary btn-xs"><i class="fa fa-print"></i></a>
    </p>
    @*</div>*@
}
@helper GridColumnChungTuGoc(string TransactionCode, string module)
{
    switch (module)
    {
        case "Customer":
        case "SalesReturns":
                <a onclick="OpenPopup('@Url.Action("Detail", "SalesReturns", new { area = "Sale", TransactionCode = TransactionCode, IsPopup = true })', 'Thông tin đơn hàng bán trả lại', 0, 500)">@TransactionCode</a>
            break;
        case "Supplier":
        case "ProductInbound":
                <a onclick="OpenPopup('@Url.Action("View", "ProductInbound", new { area = "Sale", TransactionCode = TransactionCode, IsPopup = true })', 'Thông tin phiếu nhập kho', 0, 500)">@TransactionCode</a>
            break;
        case "PurchaseOrder":
                <a onclick="OpenPopup('@Url.Action("Detail", "PurchaseOrder", new { area = "Sale", TransactionCode = TransactionCode, IsPopup = true })', 'Thông tin đơn mua hàng', 0, 500)">@TransactionCode</a>
            break;
        default:
            break;
    }
}
@helper GridColumnName(string name, int id)
{
        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("Detail", "Payment" , new { Id= id })">@name</a>
}

    @Html.Grid(Model).Columns(columns =>
{
    columns.Add(u => u.CreatedDate).Titled("Ngày ghi sổ").SetWidth(100).Format("{0:dd/MM/yyyy HH:mm}").Sortable(true);
    columns.Add(u => u.VoucherDate).Titled("Ngày chứng từ").Format("{0:dd/MM/yyyy}").SetWidth(100).Sortable(true);
    columns.Add().Titled("Mã chứng từ").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id)).SetWidth(100);
    //columns.Add().Titled("Chứng từ gốc").Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnChungTuGoc(u.MaChungTuGoc, u.LoaiChungTuGoc)).SetWidth(100);
    columns.Add(u => u.Name).Titled("Lý do");
    columns.Add(u => u.Note).Titled("Diễn giải").SetWidth(100);
    columns.Add(u => u.Amount).Titled("Số tiền (VNĐ)").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => Erp.BackOffice.Helpers.CommonSatic.ToCurrencyStr(u.Amount,null));
    columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
}).WithPaging(10)
