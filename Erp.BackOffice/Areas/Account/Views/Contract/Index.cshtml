@model IEnumerable<ContractViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Account.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_Contract;
    bool isPopup = Request["popup"] != null && Request["popup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Contract", "Account"))
            {
                <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                </button>
            }
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Edit", "Contract", "Account"))
            {
                <a class="btn btn-mini btn-success" href="@Url.Action("edit", "Contract", new { Id = id })">
                    <i class=" glyphicon glyphicon-edit bigger-120"></i>
                </a>
            }
        </p>
    </div>
}

@helper GridColumnName(string name, int id, bool isPopup)
{
    if (isPopup)
    {
        <a onclick="parent.selectBranchItem(@id)">@name</a>
    }
    else
    {
        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("Detail", "Contract" , new { Id= id })">@name</a>
    }
}
@helper GridColumnCategoryValue(string value, string code)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueCodeOrId("value", value, code);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}
<style>
    .form-search span.row span label {
        line-height: 34px;
        text-align: right;
    }

    .form-group select {
        height: 34px;
        text-align: center;
        padding: 0px;
    }
</style>
@helper GridColumnStatus(string Status)
{
    switch (Status)
    {
        case "Mới":
            <label class="label label-info " data-rel="tooltip" title="" data-placement="bottom" data-original-title="">@Status</label>
            break;
        case "Đã đặt cọc":
        <label class="label label-danger" data-rel="tooltip" title="" data-placement="bottom" data-original-title="">@Status</label>
            break;
        case "Đã thanh toán":
        <label class="label label-success" data-rel="tooltip" title="" data-placement="bottom" data-original-title="">@Status</label>
            break;
    }
}
@if (!isPopup)
{
    <div class="page-header">
        <h1>
            @ViewBag.Title
            @*<small><i class="ace-icon fa fa-angle-double-right"></i>...</small>*@
        </h1>
    </div>
    using (Html.BeginForm("Index", "Contract", FormMethod.Get, new { @class = "form-inline form-search" }))
    {
        <div class="col-sm-12" style="padding:0px">
            <div class="widget-box collapsed">
                <div class="widget-header" style="padding-top:4px;">
                    <span class="form-group">
                        @Html.TextBox("Code", null, new { placeholder = Wording.ContractCode })
                    </span>
                    <span class="form-group">
                        @Html.TextBox("TransactionCode", null, new { placeholder = Wording.TransactionCode })
                    </span>
                    <span class="form-group">
                        @Html.DropDownList("Type", SelectListHelper.GetSelectList_Category("ContractType", null, null), "- Loại hợp đồng -", new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
                    </span>
                    <span class="form-group">
                        @Html.DropDownList("Status", SelectListHelper.GetSelectList_Category("StatusContract", null, null), "- Trạng thái hợp đồng -", new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
                    </span>
                    <span class="form-group top-5">
                        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Index", "Contract", "Account"))
                        {
                            <button onclick="return true;" class="btn btn-primary btn-sm">
                                @Wording.Search
                                <i class="ace-icon fa fa-search icon-on-right bigger-110"></i>
                            </button>
                        }
                    </span>
                    <span class="form-group top-5">
                        @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Index", "Contract", "Account"))
                        {
                            <a href="@Url.Action("Index", "Contract", new { area = "Account" })" class="btn btn-black btn-sm">
                                @Wording.Reset
                                <i class="ace-icon fa fa-refresh icon-on-right bigger-110 "></i>
                            </a>
                        }
                    </span>
                    <div class="widget-toolbar">
                        <a href="#" data-action="collapse">
                            <i class="ace-icon fa fa-chevron-down"></i>
                        </a>
                    </div>
                </div>
                @*<div class="widget-body" style="display:none">
                        <div class="widget-main clearfix">
                            <div class="col-sm-6">
                                <span class="row">
                                    <span class="col-sm-3">
                                        <label>Loại hợp đồng</label>
                                    </span>
                                    <span class="col-sm-9">

                                    </span>
                                </span>
                            </div>

                            <div class="col-sm-6">
                                <span class="row">
                                    <span class="col-sm-3">
                                        <label>Hình thức làm việc</label>
                                    </span>
                                    <span class="col-sm-9">

                                    </span>
                                </span>
                                <span class="row">
                                    <span class="col-sm-3">
                                        <label> Ngày ký hợp đồng</label>
                                    </span>
                                    <span class="col-sm-9">
                                        <span class="control-group">
                                            <input class="form-control date-picker" style="margin-right:1px;" readonly="true" data-date-format="dd/mm/yyyy" placeholder="@Wording.FromDate" value="@Request[" start_date"]" name="start_date" />
                                        </span>
                                        <span class="control-group">
                                            <input class="form-control date-picker" style="margin-right:1px;" readonly="true" data-date-format="dd/mm/yyyy" placeholder="@Wording.ToDate" value="@Request[" end_date"]" name="end_date" />
                                        </span>
                                    </span>
                                </span>
                            </div>

                        </div>
                    </div>*@
            </div>
        </div>
    }
    using (Html.BeginForm("Delete", "Contract", FormMethod.Post))
    {
        <p>
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "Contract", "Account"))
            {
                @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Info, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { @href = Url.Action("Create", "Contract") })

            }
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Contract", "Account"))
            {
                <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                    @Wording.Delete
                </button>
            }
        </p>

        @Html.Grid(Model).Columns(columns =>
        {
            columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add().Titled(Wording.Status).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnStatus(u.Status));
            columns.Add().Titled(Wording.ContractCode).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id, isPopup));
            columns.Add(u => u.CustomerName).Titled(Wording.Customer);
            columns.Add(u => u.InfoPartyAName).Titled(Wording.surrogate);
            columns.Add(u => u.InfoPartyCompanyName).Titled(Wording.CompanyName);
            columns.Add().Titled(Wording.ContactType).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCategoryValue(u.Type, "ContractType"));
            //columns.Add(u => u.Place).Titled(Wording.PlaceContract);
            //columns.Add(u => u.EffectiveDate).Titled(Wording.DayEffective).RenderValueAs(u => u.EffectiveDate.Value.ToString("dd/MM/yyyy"));
            columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).RenderValueAs(u => u.CreatedDate.Value.ToString("HH:mm - dd/MM/yyyy"));
            columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).RenderValueAs(u => u.ModifiedDate.Value.ToString("HH:mm - dd/MM/yyyy"));
            columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
        }).WithPaging(10)
    }
}
else
{
    @Html.Grid(Model).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Code).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id, isPopup));
    }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>
}
