@model IEnumerable<StaffSocialInsuranceViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Staff.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_StaffSocialInsurance;
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "StaffSocialInsurance",
        ActionName = "List",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    string orderNo = (string.IsNullOrEmpty(Request["OrderNo"]) == false ? Request["OrderNo"] : "");
}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "StaffSocialInsurance", "Staff"))
            {
                <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                </button>
            }
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Edit", "StaffSocialInsurance", "Staff"))
            {
                <a type="button" name="Edit" class="btn btn-mini btn-primary" href="@Url.Action("Edit", "StaffSocialInsurance" , new { Id= id })">
                    <i class="ace-icon fa fa-pencil bigger-120"></i>
                </a>
            }
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Detail", "StaffSocialInsurance", "Staff"))
            {
                <a type="button" name="Edit" class="btn btn-mini btn-default" href="@Url.Action("Detail", "StaffSocialInsurance" , new { Id= id })">
                    <i class="ace-icon fa fa-search bigger-120"></i>
                </a>
            }
        </p>


    </div>
}

@helper GridColumnStatus(string status)
{
    if (!string.IsNullOrEmpty(status))
    {
        if (status == Erp.BackOffice.Staff.Controllers.StaffSocialInsuranceController.StatusSocialInsurance.HetHangSuDung.GetName())
        {
            <span class="red">@status</span>
        }
        else
        {
            <span class="green">@status</span>
        }
    }
}

@helper GridColumnName(int soId, string name, string code, string orderNo, int id, bool isPopup)
{
    if (isPopup)
    {
        <a onclick="parent.selectLocationItem(@soId ,@id, '@code','@name','@orderNo')">@name</a>
    }
    else
    {
        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("Edit", "StaffSocialInsurance" , new { Id= id })">@name</a>
    }
}

@helper GridColumnMedical(int id, string code, bool isPopup)
{
    if (!string.IsNullOrEmpty(code))
    {
        <i class="ace-icon fa fa-check green"></i>
    }
    else
    {
        <i class="ace-icon fa fa-times red"></i>
    }
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}



@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}


    @using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
    {
        <div class="table-responsive">
            @Html.Grid(Model).Columns(columns =>
        {
            columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).Format("{0:dd/MM/yyyy}").SetWidth(100);
            columns.Add(u => u.Status).Titled(Wording.Status).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnStatus(u.Status)).SetWidth(150);
            columns.Add(u => u.MedicalCode).Titled(Wording.HealthInsurance).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnMedical(u.Id, u.MedicalCode, isPopup)).SetWidth(20);
            columns.Add(u => u.SocietyCode).Titled(Wording.SocialInsurance).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnMedical(u.Id, u.SocietyCode, isPopup)).SetWidth(20);
            columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).Format("{0:dd/MM/yyyy}").SetWidth(100).Sortable(true);
            columns.Add(u => u.Note).Titled(Wording.Note).SetWidth(100);
            columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(130);
        })
        </div>


        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "StaffSocialInsurance", "Staff"))
            {
                <a class="btn btn-primary btn-mini" href="@Url.Action("Create", pageSetting.ModuleName)">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
            }
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "StaffSocialInsurance", "Staff"))
            {
                <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                    @Wording.Delete
                </button>
            }
        }
    }

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>
}
@Html.ScriptBottom_ValidationMvc()
@Html.ScriptBottom_ChosenStyle()