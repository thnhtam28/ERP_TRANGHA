@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Staff.Models

@model BranchViewModel

@{
    ViewBag.Title = Model.ParentId == null ? Wording.PageEdit_Branch : Wording.PageEdit_DrugStore;
    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Branch",
        ActionName = "Edit",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
}
@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
    <style type="text/css">

    </style>
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}
@using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Edit", "Branch", null, FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.CreatedUserId)
    @Html.HiddenFor(model => model.CreatedDate)
    @Html.HiddenFor(model => model.IsDeleted)
    @Html.HiddenFor(model => model.ParentId)
    <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
    <input type="hidden" name="UrlReferrer" value="@Request.UrlReferrer" />
    @Html.CustomTextboxFor(model => model.Name, null, null, WidthType.span12, true)
    @Html.CustomTextboxFor(model => model.Code, null, null, WidthType.span12, true)
    @Html.CustomTextboxFor(model => model.Phone, null, null, WidthType.span12, true)
    @Html.CustomTextboxFor(model => model.Email, null, null, WidthType.span12, true)
    @Html.CustomDropDownListFor(model => model.CityId, Model.ProvinceList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleChosen)
    @Html.CustomDropDownListFor(model => model.DistrictId, Model.DistrictList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleChosen)
    @Html.CustomDropDownListFor(model => model.WardId, Model.WardList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleChosen)
    @Html.CustomTextboxFor(model => model.Address, null, null, WidthType.span12, true)
    @*@Html.DateInput(model => model.CooperationDay, "dd/MM/yyyy", "99/99/9999", true, WidthType.span12)*@
    @*if (Model.ParentId != null && Model.ParentId > 0)
    {
      @Html.CustomTextboxFor(model => model.MaxDebitAmount, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right" } })
    }*@
    using (Html.BeginButtonContainer(pageSetting))
    {
        <button class="btn btn-mini btn-primary" type="submit" name="Submit" value="Save">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </button>
    }
}

@section Scripts {
    <script>
        $(document).ready(function () {
            if ($("#ParentId").val() != '') {
                //ele.find('label .control-label').html('Tên phòng GDĐT');
                SetTextForId($('#Code'), "Mã phòng ban");
                SetTextForId($('#Name'), "Tên phòng ban");
            }
            else {
                SetTextForId($('#Code'), "Mã chi nhánh");
                SetTextForId($('#Name'), "Tên chi nhánh");
            }
        });
        function SetTextForId(ele, strName) {
            var a = $(ele).closest('div .control-group');
            a.find('label').html(strName);
        }
        var url = '/api/BackOfficeServiceAPI/FetchLocation';
        var districts = $('#DistrictId'); // cache it
        var ward = $('#WardId');

        $("#CityId").change(function () {
            var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
            $.getJSON(url, { parentId: id }, function (response) {
                districts.empty(); // remove any existing options
                ward.empty();
                $(document.createElement('option'))
                        .attr('value', '')
                        .text('- Rỗng -')
                        .appendTo(ward).trigger('chosen:updated');
                $(response).each(function () {
                    $(document.createElement('option'))
                        .attr('value', this.Id)
                        .text(capitalizeFirstAllWords(this.Name.toLowerCase().replace('huyện', '').replace('quận', '')))
                        .appendTo(districts).trigger('chosen:updated');
                });
            });
        });

        $("#DistrictId").change(function () {
            var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
            $.getJSON(url, { parentId: id }, function (response) {
                ward.empty(); // remove any existing options
                $(response).each(function () {
                    $(document.createElement('option'))
                        .attr('value', this.Id)
                        .text(capitalizeFirstAllWords(this.Name.toLowerCase()))
                        .appendTo(ward).trigger('chosen:updated');
                });
            });
        });
        var urlRefer = '@ViewBag.urlRefer';
        //truyền từ action create của controller qua khi thực hiện submit và return về lại view create, để nhận biết là được gọi theo dạng popup
        var closePopup = '@ViewBag.closePopup';
        $(document).ready(function () {
            $('#MaxDebitAmount').numberFormat();
            //nếu là được gọi theo dạng popup từ form khác thì chạy đoạn code bên dưới
            if (closePopup != '') {
                var option = '<option value="@Model.Id" >@Model.Name</option>';
                //tên funtion có thể khác theo từng công việc riêng (đây chỉ là mẫu khi thêm mới sẽ gọi lại)
                window.parent.ClosePopupAndDoSomething(option);
            }

            //nếu có url thì gọi hàm này để trang ngoài iframe nhảy trang
            if (urlRefer != '') {
                window.parent.ClosePopupAndRedirectToURL(urlRefer);
            }
        });
    </script>
    @Html.ScriptBottom_ValidationMvc()
  @Html.ScriptBottom_DatePicker("dd/mm/yyyy")
@Html.ScriptBottom_ChosenStyle()
@Html.ScriptBottom_RequireEitherInput()
@Html.ScriptBottom_InputMask()
}
