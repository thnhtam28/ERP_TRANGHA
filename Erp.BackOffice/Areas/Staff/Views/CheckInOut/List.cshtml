@model IEnumerable<CheckInOutViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Staff.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_CheckInOut;
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "CheckInOut",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
  
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        </p>
    </div>
}
@helper GridColumnCategoryValue(object value)
{
    var attr = Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

        @using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
        {
            @Html.Grid(Model).Columns(columns =>
       {
           columns.Add(m => m.MachineNo).Titled("MachineNo").Sortable(false);
           columns.Add(m => m.UserId).Titled("UserId").Sortable(false);
           columns.Add(m => m.TimeStr).Titled("Thời gian quẹt thẻ").Sortable(false);
       }).WithPaging(50)

          
        }

        @section Scripts {
            <script type="text/javascript">
                function CheckIsval() {
                    if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                        alert("Phải chọn ít nhất 1 item.");
                        return false;
                    }
                    else {
                        if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }

                $('[name="Delete"]').click(function () {
                    if (confirm('Bạn có chắc muốn xóa item ?')) {
                        $(this).closest('tr').children('td').each(function (i, e) {
                            $(this).find("input.class-delete-all").prop("checked", true);
                            return true;
                        })
                    }
                    else {
                        return false;
                    }

                })
               
            </script>
        }
