    @model IEnumerable<CheckInOutViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Staff.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = Wording.PageIndex_CheckInOut;
        bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
        if (isPopup)
        {
            Layout = "~/Views/Shared/_PopupLayout.cshtml";
        }
        else
        {
            Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        }

        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "CheckInOut",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = true,
            IsPopup = false,
            DisplayBackButton = false
        };
        string branch;
        //get cookie brachID 
        if (Common.CurrentUser.BranchId == null)
        {
            HttpRequestBase request = this.Context.Request;
            string strBrandID = "0";
            if (request.Cookies["BRANCH_ID_SPA_CookieName"] != null)
            {
                strBrandID = request.Cookies["BRANCH_ID_SPA_CookieName"].Value;
                if (strBrandID == "")
                {
                    strBrandID = "0";
                }
            }
            branch = strBrandID;
        }
        else
        {
            branch = (string.IsNullOrEmpty(Request["Branch"]) == false ? Request["Branch"] : Common.CurrentUser.BranchId.Value.ToString());
        }
    }


    <link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

    @helper GridColumnCommand(int id)
        {
//if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "CheckInOut", "Staff"))
//{
                <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
                    <p>
                        <button name="Delete" value="@id" type="submit" class="btn btn-mini btn-danger">
                            <i class="ace-icon fa fa-trash bigger-120"></i>
                        </button>
                    </p>
                </div>
            @*}*@
        }

    @helper GridColumnName(string name, int id, bool isPopup)
        {
            if (isPopup)
            {
                <a onclick="parent.selectBranchItem(@id)">@name</a>
            }
            else
            {
                name = string.IsNullOrEmpty(name) ? "No Title" : name;
                <a href="@Url.Action("Edit", "CheckInOut" , new { Id= id })">@name</a>
            }
        }

    @helper GridColumnCategoryValue(object value)
        {
            var attr = Common.GetCategoryByValueOrId("value", value);
            <span>@(attr != null ? attr.Name : "")</span>
        }

    @helper CheckDeleteColumns(int Id)
        {
            <label>
                <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
                <span class="lbl"></span>
            </label>
        }

    @helper BuildCheckAll()
        {
            <label>
                <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
                <span class="lbl"></span>
            </label>
        }

    @using (Html.BeginPageHeaderContainer(pageSetting))
    {
        <p>
            @Html.TextBox("txtSearch", Request["txtSearch"], new { @class = "form-control", autocomplete = "off", placeholder = "Tên hoặc mã nhân viên" })
            @*Html.DropDownList("Branch", SelectListHelper.GetSelectList_Branch(branch, Wording.BranchName), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })*@
            @Html.DropDownList("Department", SelectListHelper.GetSelectList_BranchDepartment(Request["Department"], Int32.Parse(branch), Wording.Department), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
        </p>
    }

    @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }

    @if (!isPopup)
    {
        using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
        {
            @Html.Grid(Model).Columns(columns =>
            {
                columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
                columns.Add(m => m.UserId).Titled("UserId").Sortable(false).Sanitized(false);
                columns.Add(m => m.Name).Titled("Name").Sortable(false).Sanitized(false);
                columns.Add().Titled(Wording.TimeType).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.TimeType, u.Id, isPopup));
                columns.Add(m => m.CreatedDate).Titled(Wording.CreatedDate).SetWidth(200).Sortable(true);
                columns.Add(m => m.TimeStr).Titled(Wording.TimeStr).SetWidth(200).Sortable(false);
                columns.Add(m => m.TimeDate).Titled("TimeDate").SetWidth(150).Format("{0:dd/MM/yyyy}");
                columns.Add(m => m.MachineNo).Titled("MachineNo").SetWidth(100).Sortable(false);
                columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
            }).WithPaging(10)

            using (Html.BeginButtonContainer(pageSetting))
            {
                <a class="btn btn-primary btn-mini" href="@Url.Action("Create", pageSetting.ModuleName)">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
                <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                    @Wording.Delete
                </button>
            }
        }
    }
    else
    {
        @Html.Grid(Model).Columns(columns =>
             {
                //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
                columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().TimeType).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.TimeType, u.Id, isPopup));
             }).WithPaging(10)
    }
    @section Scripts {
        <script type="text/javascript">
            $('.class-delete-all').on('click', function () {
                if ($('.class-delete-all:checked').length == $('.class-delete-all').length) {
                    $('#checkAll').prop('checked', true);
                } else {
                    $('#checkAll').prop('checked', false);
                }
            });
            function CheckIsval() {
                if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                    alert("Phải chọn ít nhất 1 item.");
                    return false;
                }
                else {
                    if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
            $('[name="Delete"]').click(function () {
                if (confirm('Bạn có chắc muốn xóa item ?')) {
                    $(this).closest('tr').children('td').each(function (i, e) {
                        //$(this).find("input.class-delete-all").prop("checked", true);
                        return true;
                    })
                }
                else {
                    return false;
                }
            })
            $('.grid-header').mouseover(function () {
                $('.grid-header')[0].title = "Chọn tất cả";
            });
        </script>
    }
