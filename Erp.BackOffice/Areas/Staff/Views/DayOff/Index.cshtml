@model IEnumerable<DayOffViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Staff.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = "Danh sách nhân viên nghỉ phép";
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "DayOff",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    string branch = (string.IsNullOrEmpty(Request["branchId"]) == false ? Request["branchId"] : "0");
    string orderNo = (string.IsNullOrEmpty(Request["OrderNo"]) == false ? Request["OrderNo"] : "");
    int rowNumber = 0;
    int numberOfItem = 10;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <button name="Delete" value="Delete" type="submit" id="btn_delete_dayoff_@id" class="btn btn-mini btn-danger" onclick="return DayOffDelete(@id)">
        <i class="ace-icon fa fa-trash bigger-120"></i>
    </button>
}

@helper GridColumnName(int Id, string BranchName, string code, bool isPopup)
{
    if (isPopup)
    {
        <p data-toggle="tooltip" title="Mã phép">
            <i class="fa fa-barcode"></i> @code
        </p>
    }
    else
    {
        <p data-toggle="tooltip" title="Mã phép">
            <i class="fa fa-barcode"></i> <a onclick="OpenPopup('@Url.Action("Edit", "DayOff", new { area = "Staff", Id = Id, IsPopup = "true" })', '@Wording.PageEdit_DayOff', 500, 500)"><b> @code</b></a>
        </p>
    }
    <span data-toggle="tooltip" title="Chi nhánh">
        <i class="glyphicon glyphicon-home"></i> @BranchName
    </span>

}
@helper GridColumnNameStaff(int Id, string Image, int? StaffId, string StaffCode, string StaffName, string orderNo, bool isPopup)
{

    StaffName = string.IsNullOrEmpty(StaffName) == false ? StaffName : "No Title";
    <div class="itemdiv commentdiv">
        <div class="user">
            <div class="ace-thumbnails">
                <a href="@(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(Image,"Staff","user"))" title="@StaffName" data-rel="colorbox" class="cboxElement">
                    <img id="myImg" alt="@StaffName" src="@(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(Image,"Staff", "user"))">
                </a>
            </div>
        </div>
        <div class="body">
            <div class="name" data-toggle="tooltip" title="Tên nhân viên">
                @if (isPopup)
            {
                <a onclick="parent.selectLocationItem('@Id' ,'@StaffId', '@StaffCode','@StaffName','@orderNo')"><b> @StaffName</b></a>
        }
        else
        {
            <a href="@Url.Action("Detail", "Staffs", new { Id = StaffId })"><b>@StaffName</b></a>
    }
            </div>
            <div class="text" data-toggle="tooltip" title="Mã nhân viên">
                @StaffCode
            </div>
        </div>
    </div>

}

@helper GridColumnDateName(int? quantity, string NameSymbol)
{
    <p data-toggle="tooltip" title="Số ngày nghỉ">
        <i class="fa fa-hourglass-half"></i> @quantity
    </p>
    <span data-toggle="tooltip" title="Tên loại ngày nghỉ"><i class="fa fa-sticky-note"></i> @NameSymbol</span>
}
@helper GridColumnCreateDate(DateTime? CreateDate, DateTime? ModifiDate)
{
    <p data-toggle="tooltip" title="Từ ngày">
        <i class="fa fa-calendar-check-o"></i> @CreateDate.Value.ToString("dd/MM/yyyy")
    </p>
    <span data-toggle="tooltip" title="Đến ngày"><i class="fa fa-calendar-minus-o"></i> @ModifiDate.Value.ToString("dd/MM/yyyy")</span>
}
@helper GridColumnCategoryValue(object value)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("Name", Request["Name"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.StaffName })
        @Html.TextBox("Code", Request["Code"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.CodeStaff })
        <span class="input-daterange input-group">
            @Html.TextBox("start_date", Request["start_date"] != null ? Request["start_date"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "Từ ngày" })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("end_date", Request["end_date"] != null ? Request["end_date"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "Đến ngày" })
        </span>

        @Html.DropDownList("TypeDayOff", SelectListHelper.GetSelectList_SymbolTimekeeping(Request["TypeDayOff"], "Loại ngày nghỉ", true), new Dictionary<string, object> { { "class", "form-control" } })
        @Html.DropDownList("branchId", SelectListHelper.GetSelectList_Branch(Request["branchId"], Wording.BranchName), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
        @Html.DropDownList("DepartmentId", SelectListHelper.GetSelectList_BranchDepartment(Request["DepartmentId"], Int32.Parse(branch), Wording.Department), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
    </p>
}
@if (!isPopup)
{
    <div class="table-responsive">
        @Html.Grid(Model).Columns(columns =>
  {

      //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
      columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
      {
          rowNumber++;
          return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
      });
      columns.Add().Titled(Wording.InfoStaff).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnNameStaff(u.Id, u.ProfileImage, u.StaffId.Value, u.CodeStaff, u.NameStaff, orderNo, isPopup));
      columns.Add().Titled("Thông tin đăng ký").SetWidth(131).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Id, u.BranchName, u.Code, isPopup));
      columns.Add().Titled("Thông tin nghỉ").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnDateName(u.Quantity, u.NameSymbol));
      columns.Add().Titled("Thời gian nghỉ phép").SetWidth(150).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCreateDate(u.DayStart, u.DayEnd));
      columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
  }).WithPaging(10)
    </div>

    using (Html.BeginButtonContainer(pageSetting))
    {
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "DayOff", "Staff"))
        {
            @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Info, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { @class = "btn-DayOffCreate", @onclick = "OpenPopup('" + Url.Action("Create", "DayOff", new { area = "Staff", IsPopup = "true" }) + "', '" + Wording.PageCreate_DayOff + "', 0, 500)" })
        }
        @*<button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                <i class="ace-icon fa fa-trash bigger-120"></i>
                @Wording.Delete
            </button>*@
        @*<input type="hidden" id="UrlReferrer" name="UrlReferrer" value="@Request.UrlReferrer" />*@
    }
}
else
{
    <div class="table-responsive">
        @Html.Grid(Model.Where(u => u.CodeSymbol.Contains("TS") || u.CodeSymbol.Contains("OM") || u.CodeSymbol.Contains("HP"))).Columns(columns =>
       {
           columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
           {
               rowNumber++;
               return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
           });
           columns.Add().Titled(Wording.InfoStaff).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnNameStaff(u.Id, u.ProfileImage, u.StaffId.Value, u.CodeStaff, u.NameStaff, orderNo, isPopup));
           columns.Add().Titled("Thông tin đăng ký").SetWidth(131).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Id, u.BranchName, u.Code, isPopup));
           columns.Add().Titled("Thông tin nghỉ").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnDateName(u.Quantity, u.NameSymbol));
           columns.Add().Titled("Thời gian nghỉ phép").SetWidth(150).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCreateDate(u.DayStart, u.DayEnd));
           //columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
       }).WithPaging(10)
    </div>
}
@section Scripts {
    <script type="text/javascript">
        function ClosePopupAndRedirectToURL(url) {
            ClosePopup(true);
            location.href = url;
        }
        function ClosePopupAndDoSomething() {
            ClosePopup(true);
            ShowLoading();
        }
        //Fetch BranchDepartment of University
        var urDepartmentl = '/api/BackOfficeServiceAPI/FetchBranchDepartment';
        var department = $("#DepartmentId"); // cache it

        $("#branchId").change(function () {
            //console.log($(this).val());
            ShowLoading();
            department.empty(); // remove any existing options
            $(document.createElement('option'))
                .attr('value', '')
                .text('- Rỗng -')
                .appendTo(department).trigger('chosen:updated');
            var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
            $.getJSON(urDepartmentl, { BranchId: id }, function (response) {
                department.empty(); // remove any existing options
                $(response).each(function () {
                    $(document.createElement('option'))
                        .attr('value', this.Id)
                        .text(this.Staff_DepartmentId)
                        .appendTo(department).trigger('chosen:updated');
                    HideLoading();
                });
            });
        });
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/mm/yyyy")
}
