@model IQueryable<DayOffViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Staff.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_DayOff;
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "DayOff",
        ActionName = "List",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <button name="Delete" value="Delete" type="submit" id="btn_delete_dayoff_@id" class="btn btn-mini btn-danger" onclick="return DayOffDelete(@id)">
        <i class="ace-icon fa fa-trash bigger-120"></i>
    </button>
}

@helper GridColumnName(string name, int id)
{
    if (string.IsNullOrEmpty(name))
    {
        <span>NoTile</span>
    }
    else
    {
        <a onclick="OpenPopup('@Url.Action("Edit", "DayOff", new { area = "Staff", Id = id, IsPopup = "true" })', '@Wording.PageEdit_DayOff', 500, 500)">@name</a>
    }
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}
<div class="table-responsive">
    @Html.Grid(Model).Columns(columns =>
   {
       int index = 0;
       columns.Add().Titled(Wording.OrderNo).SetWidth(30).RenderValueAs(n => (++index).ToString());
       columns.Add(u => u.DayStart).Titled(Wording.DayStart).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.DayStart.HasValue ? u.DayStart.Value.ToString("dd/MM/yyyy") : "", u.Id));
       columns.Add(u => u.DayEnd).Format("{0:dd/MM/yyyy}").Titled(Wording.DayEnd).SetWidth(100);
       columns.Add(u => u.Quantity).Titled(Wording.QuantityDayOff).SetWidth(100);
       columns.Add(u => u.QuantityNotUsed).Titled(Wording.QuantityDayNotUsed).SetWidth(100);
       columns.Add(u => u.NameSymbol).Titled(Wording.TypeDayOffName).SetWidth(100);
       columns.Add(u => u.CreatedDate).Format("{0:HH:mm - dd/MM/yyyy}").Titled(Wording.CreatedDate).SetWidth(200);
       //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
       columns.Add(u => u.ModifiedDate).Format("{0:HH:mm - dd/MM/yyyy}").Titled(Wording.ModifiedDate).SetWidth(200).Sortable(true);
       columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
   }).WithPaging(10)
</div>
@using (Html.BeginButtonContainer(pageSetting))
{
    if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "DayOff", "Staff"))
    {
        @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Info, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { @class = "btn-DayOffCreate", @onclick = "OpenPopup('" + Url.Action("Create", "DayOff", new { area = "Staff", IsPopup = "true" }) + "', '" + Wording.PageCreate_DayOff + "', 0, 500)" })
    }
}
@section Scripts {
    <script type="text/javascript">
        function ClosePopupAndRedirectToURL(url) {
            ClosePopup(true);
            location.href = url;
        }
        function ClosePopupAndDoSomething() {
            ClosePopup(true);
            ShowLoading();
        }

    </script>
    @Html.ScriptBottom_DatePicker("dd/mm/yyyy")
}
