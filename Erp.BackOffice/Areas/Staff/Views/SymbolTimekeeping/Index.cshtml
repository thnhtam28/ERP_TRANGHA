@model IQueryable<SymbolTimekeepingViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Staff.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_SymbolTimekeeping;
    bool isPopup = Request["popup"] != null && Request["popup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "SymbolTimekeeping",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = false
    };
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "SymbolTimekeeping", "Staff"))
            {
                <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                </button>
            }
        </p>
    </div>
}

@helper GridColumnName(string name, int id, bool isPopup, int? quantity)
{

    name = string.IsNullOrEmpty(name) ? "No Title" : name;
    if (quantity != null && quantity.Value > 0)
    {
        <a onclick="OpenPopup('@Url.Action("Edit", "SymbolTimekeeping", new { Id = id, IsPopup = true })', '@Wording.PageEdit_SymbolTimekeeping' , 500, 490)">@name (@quantity ngày)</a>

    }
    else
    {
        <a onclick="OpenPopup('@Url.Action("Edit", "SymbolTimekeeping", new { Id = id, IsPopup = true })', '@Wording.PageEdit_SymbolTimekeeping' , 500, 490)">@name</a>
    }
}
@helper GridColumnCheckTrue(bool? check)
{
    if (check == true)
    {
        <i class="fa fa-check green"></i>
    }
    else
    {
        <i class="fa fa-remove red"></i>
    }

}
@helper GridColumnColor(string color)
{

    <label class="label" style="background-color:@color;width:15px;">           </label>
}
@helper GridColumnCategoryValue(object value)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{

}
@using (Html.BeginForm("Delete", "SymbolTimekeeping", FormMethod.Post))
{
    @*<p>
            @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Info, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { @class = "btn-StaffFamilyCreate", @onclick = "OpenPopup('" + Url.Action("Create", "SymbolTimekeeping", new { area = "Staff", IsPopup = "true" }) + "', '" + Wording.PageCreate_SymbolTimekeeping + "', 100, 300)" })


        </p>*@
    <div class="table-responsive">
        @Html.Grid(Model).Columns(columns =>
{
    columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
    int index = 0;
    columns.Add().Titled(Wording.OrderNo).SetWidth(30).RenderValueAs(n => (++index).ToString());
    columns.Add().Titled(Wording.Symbol).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.Code);
    columns.Add().Titled(Wording.SymbolName).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup, u.Quantity));
    //columns.Add(u => u.Quantity).Titled(Wording.QuantityDayOff).SetWidth(100).Css("text-right");
    columns.Add().Titled(Wording.Absent).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCheckTrue(u.Absent));
    columns.Add().Titled(Wording.Timekeeping).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCheckTrue(u.Timekeeping));
    columns.Add().Titled(Wording.ApplicationForLeave).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCheckTrue(u.DayOff));
    columns.Add().Titled(Wording.Color).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnColor(u.Color));

    //columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(150).RenderValueAs(u => u.CreatedDate.Value.ToString("HH:mm - dd/MM/yyyy"));
    columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(150).RenderValueAs(u => u.ModifiedDate.Value.ToString("HH:mm - dd/MM/yyyy"));
    columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
}).WithPaging(20)
    </div>
    using (Html.BeginButtonContainer(pageSetting))
    {
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "SymbolTimekeeping", "Staff"))
        {
            <a class="btn btn-info btn-mini" onclick="OpenPopup('@Url.Action("Create", pageSetting.ModuleName, new { IsPopup = true })', '@Wording.PageCreate_SymbolTimekeeping', 500, 490)">
                <i class="ace-icon fa fa-plus"></i>
                @Resources.Wording.CreateNew
            </a>
        }
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "SymbolTimekeeping", "Staff"))
        {
            <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                <i class="ace-icon fa fa-trash bigger-120"></i>
                @Wording.Delete
            </button>
        }
    }
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })
        function ClosePopupAndAppendSelect() {
            ShowLoading();
            ClosePopup(true);
        }
    </script>
}
