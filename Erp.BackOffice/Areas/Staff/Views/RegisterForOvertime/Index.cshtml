@model IEnumerable<RegisterForOvertimeViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Staff.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = Wording.PageIndex_RegisterForOvertime;
        bool isPopup = Request["popup"] != null && Request["popup"].ToString().ToLower() == "true" ? true : false;
        if (isPopup)
        {
            Layout = "~/Views/Shared/_PopupLayout.cshtml";
        }
        else
        {
            Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        }
        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "RegisterForOvertime",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = true,
            IsPopup = false,
            DisplayBackButton = false,
            AdvancedSearch = false
        };
        int rowNumber = 0;
        int numberOfItem = 10;
        int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    }
    @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }

    <link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
    <style type="text/css">
      
    </style>
    @helper GridColumnNameStaff(string name, string code, int id, string Image)
        {
            name = string.IsNullOrEmpty(name) == false ? name : "No Title";
    <div class="itemdiv commentdiv">
        <div class="user">
            <div class="ace-thumbnails">
                <a href="@(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(Image,"Staff","user"))" title="@name" data-rel="colorbox" class="cboxElement">
                    <img id="myImg" alt="@name" src="@(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(Image,"Staff", "user"))">
                </a>
            </div>
        </div>
        <div class="body">
            <div class="name" data-toggle="tooltip" title="Tên nhân viên">
                <a href="@Url.Action("Detail", "Staffs", new { Id = id })"><b>@name</b></a>
            </div>
            <div class="text" data-toggle="tooltip" title="Mã nhân viên">
                @code
            </div>
        </div>
    </div>
}
    @helper GridColumnCommand(int id)
        {
            <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
                <p>
                    <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                        <i class="ace-icon fa fa-trash bigger-120"></i>
                    </button>
                </p>
            </div>
}
    @helper GridColumnName(string Code, string BranchName, int Id, bool isPopup)
        {
            if (isPopup)
            {
                <a onclick="parent.selectBranchItem(@Id)">@Code</a>
            }
            else
            {
                <p data-toggle="tooltip" title="Mã tăng ca">
                    <i class="fa fa-barcode"></i><a onclick="OpenPopup('@Url.Action("Edit", "RegisterForOvertime", new { area = "Staff", Id = Id, IsPopup = "true" })', '@Wording.PageEdit_RegisterForOvertime', 200, 500)"><b> @Code</b></a>
                </p>
                <span data-toggle="tooltip" title="Chi nhánh">
                    <i class="glyphicon glyphicon-home"></i> @BranchName
                </span>
            }
}
    @helper GridColumnDateName(DateTime? Day, DateTime? StartHour, DateTime? EndHour)
        {
            <p data-toggle="tooltip" title="Ngày tăng ca">
                <i class="fa fa-calendar-minus-o"></i> @Day.Value.ToString("dd/MM/yyyy")
            </p>
            <span data-toggle="tooltip" title="Thời gian tăng ca"><i class="fa fa-hourglass-half"></i> @(StartHour.HasValue ? StartHour.Value.ToString("HH:mm") : "chưa có") <i class="fa fa-arrows-h"></i> @(EndHour.HasValue ? EndHour.Value.ToString("HH:mm") : "chưa có")</span>
}
    @helper GridColumnCreateDate(DateTime? CreateDate, DateTime? ModifiDate)
        {
            <p data-toggle="tooltip" title="Ngày đăng ký">
                <i class="fa fa-calendar-plus-o"></i> @CreateDate.Value.ToString("dd/MM/yyyy HH:mm")
            </p>
            <span data-toggle="tooltip" title="Ngày cập nhật"><i class="fa fa-calendar-check-o"></i> @ModifiDate.Value.ToString("dd/MM/yyyy HH:mm")</span>
}
    @helper GridColumnCategoryValue(object value)
        {
            var attr = Common.GetCategoryByValueOrId("value", value);
            <span>@(attr != null ? attr.Name : "")</span>
}

    @helper CheckDeleteColumns(int Id)
        {
            <label>
                <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
                <span class="lbl"></span>
            </label>
}

    @helper BuildCheckAll()
        {
            <label>
                <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
                <span class="lbl"></span>
            </label>
}
    @section HeadOfPage {
        @Html.ScriptTop_ChosenStyle()
        <style type="text/css">
        </style>
    }
    @using (Html.BeginPageHeaderContainer(pageSetting))
    {
        <p>
            @Html.TextBox("Code", Request["Code"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.CodeDecisions + "..." })
            @Html.TextBox("CodeStaff", Request["CodeStaff"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.CodeStaff + "..." })
            @Html.TextBox("Name", Request["Name"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.NameStaff + "..." })
            @Html.DropDownList("branchId", SelectListHelper.GetSelectList_Branch(Request["branchId"], "Chi nhánh"), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
            @Html.DropDownList("DepartmentId", new List<SelectListItem> { new SelectListItem { Text = "Phòng ban", Value = "" } }, new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
            <span class="input-daterange input-group">
                @Html.TextBox("start_date", Request["start_date"] != null ? Request["start_date"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "Ngày tăng ca từ..." })
                <span class="input-group-addon">
                    <i class="fa fa-exchange"></i>
                </span>
                @Html.TextBox("end_date", Request["end_date"] != null ? Request["end_date"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "đến..." })
            </span>
        </p>
    }
    @if (!isPopup)
    {
        using (Html.BeginForm("Delete", "RegisterForOvertime", FormMethod.Post))
        {
            <div class="table-responsive">
                @Html.Grid(Model).Columns(columns =>
                          {

                              columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
                              columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
                              {
                                  rowNumber++;
                                  return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
                                 });
                                 columns.Add().Titled(Wording.InfoStaff).SetWidth(210).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnNameStaff(u.Name, u.CodeStaff, u.StaffId.Value, u.ProfileImage));
                                 columns.Add().Titled("Thông tin đăng ký").SetWidth(131).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.BranchName, u.Id, isPopup));
                                 columns.Add().Titled("Thông tin tăng ca").SetWidth(127).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnDateName(u.DayOvertime, u.StartHour, u.EndHour));
                                 columns.Add(u => u.Note).Titled(Wording.Note);
                                 columns.Add().Titled("Thời gian").SetWidth(150).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCreateDate(u.CreatedDate, u.ModifiedDate));
                                 columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
                             }).WithPaging(10)
            </div>
            using (Html.BeginButtonContainer(pageSetting))
            {
                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "RegisterForOvertime", "Staff"))
                {
                    @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Info, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { @class = "btn-BonusDisciplineCreate", @onclick = "OpenPopup('" + Url.Action("Create", "RegisterForOvertime", new { area = "Staff", IsPopup = "true" }) + "', '" + Wording.PageCreate_RegisterForOvertime + "', 0, 300)" })
                }
                if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "RegisterForOvertime", "Staff"))
                {
                    <button class="btn btn-mini btn-danger" type="submit" name="DeleteAll" value="DeleteAll" onclick="return CheckIsval();">
                        <i class="ace-icon fa fa-trash"></i>
                        @Wording.Delete
                    </button>
                }
            }
        }
    }
    else
    {
        @Html.Grid(Model).Columns(columns =>
                     {
            //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Name).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.BranchName, u.Id, isPopup));
                     }).WithPaging(10)
    }

    @section Scripts {
        <script type="text/javascript">
            function CheckIsval() {
                if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                    alert("Phải chọn ít nhất 1 item.");
                    return false;
                }
                else {
                    if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }

            $('[name="Delete"]').click(function () {
                if (confirm('Bạn có chắc muốn xóa item ?')) {
                    $(this).closest('tr').children('td').each(function (i, e) {
                        $(this).find("input.class-delete-all").prop("checked", true);
                        return true;
                    })
                }
                else {
                    return false;
                }

            })
            //Fetch Department
            var urDepartmentl = '/api/BackOfficeServiceAPI/FetchBranchDepartment';
            var department = $('[name="DepartmentId"]'); // cache it

            $('[name="branchId"]').change(function () {
                ShowLoading();
                department.empty(); // remove any existing options
                $(document.createElement('option'))
                    .attr('value', '')
                    .text('- Rỗng -')
                    .appendTo(department).trigger('chosen:updated');
                var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
                $.getJSON(urDepartmentl, { BranchId: id }, function (response) {
                    department.empty(); // remove any existing options
                    $(response).each(function () {
                        $(document.createElement('option'))
                            .attr('value', this.Id)
                            .text(this.Staff_DepartmentId)
                            .appendTo(department).trigger('chosen:updated');
                        HideLoading();
                    });
                });
            });
            function ClosePopupAndAppendSelect() {
                ShowLoading();
                ClosePopup(true);
            }
        </script>
        @Html.ScriptBottom_ValidationMvc()
        @Html.ScriptBottom_DatePicker("dd/mm/yyyy")
        @Html.ScriptBottom_ChosenStyle()
    }
