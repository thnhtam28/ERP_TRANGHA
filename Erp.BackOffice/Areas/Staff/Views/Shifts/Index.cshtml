@model IQueryable<ShiftsViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Staff.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = Wording.PageIndex_Shifts;
        bool isPopup = Request["popup"] != null && Request["popup"].ToString().ToLower() == "true" ? true : false;
        if (isPopup)
        {
            Layout = "~/Views/Shared/_PopupLayout.cshtml";
        }
        else
        {
            Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        }

        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "Shifts",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = false,
            IsPopup = false,
            DisplayBackButton = false
        };
    }

    @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }

    <link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

    @helper GridColumnCommand(int id)
    {
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        </p>
    </div>
}
    @helper GridColumnName(string name, int id, bool isPopup)
    {
if (isPopup)
{
        <a onclick="parent.selectBranchItem(@id)">@name</a>
}
else
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("Edit", "Shifts", new { Id = id })">@name</a>
}
}
    @helper GridColumnCategoryValue(object value)
    {
var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

    @helper CheckDeleteColumns(int Id)
    {
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}
    @helper GridColumnPay(int? pay)
    {
if (pay != null)
{
        <label>@pay %</label>
}
else
{
        <label>0 %</label>
}
}
    @helper BuildCheckAll()
    {
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}
    @using (Html.BeginPageHeaderContainer(pageSetting))
    {

    }
    @if (!isPopup)
    {
        using (Html.BeginForm("Delete", "Shifts", FormMethod.Post))
        {
            List<SelectListItem> list = SelectListHelper.GetSelectList_Category("categoryShifts", null, "Value", null).ToList();
            <div class="tabbable">
                <ul class="nav nav-tabs padding-12 tab-color-blue background-blue" id="tabCustomer">
                    @for (int i = 0; i < list.Count(); i++)
                    {
                        <li id="tab_li_@i">
                            <a data-toggle="tab" href="#tab_@i">@list[i].Text</a>
                        </li>
                    }
                </ul>
                <div class="tab-content">
                    @for (int i = 0; i < list.Count(); i++)
                    {
                        var value = list[i].Value;
                        <div class="tab-pane clearfix" id="tab_@i">
                            <div class="table-responsive">
                                @Html.Grid(Model.Where(x => x.CategoryShifts == value)).Columns(columns =>
                           {
                               if (value == "Part-time")
                               {
                                   columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
                               }
                               int index = 0;
                               columns.Add().Titled(Wording.OrderNo).SetWidth(30).RenderValueAs(n => (++index).ToString());
                               columns.Add().Titled(Wording.ShiftsName).SetWidth(200).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
                               columns.Add(u => u.Code).Titled(Wording.ShiftsCode).SetWidth(100);
                               columns.Add(u => u.StartTime).Titled(Wording.StartTime).SetWidth(100);
                               columns.Add().Titled("Thời gian quẹt thẻ đầu ca").SetWidth(100).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.StartTimeIn + "-" + u.StartTimeOut);
                               columns.Add(u => u.EndTime).Titled(Wording.EndTime).SetWidth(100);
                               columns.Add().Titled("Thời gian quẹt thẻ cuối ca").SetWidth(100).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.EndTimeIn + "-" + u.EndTimeOut);
                               //columns.Add().Titled(Wording.CentPay).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnPay(u.Pay)).Css("text-right");
                               //columns.Add(u => u.CreatedDate).Format("{0:HH:mm dd/MM/yyyy}").Titled(Wording.CreatedDate).SetWidth(180);
                               //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
                               columns.Add(u => u.ModifiedDate).Format("{0:HH:mm dd/MM/yyyy}").Titled(Wording.ModifiedDate).SetWidth(180).Sortable(true);
                               if (value == "Part-time")
                               {
                                   columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
                               }
                           }).WithPaging(10)
                            </div>
                        </div>
                    }
                </div>
            </div>
            using (Html.BeginButtonContainer(pageSetting))
            {
                <a class="btn btn-mini btn-primary" href="@Url.Action("Create", pageSetting.ModuleName)">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
                <button class="btn btn-mini btn-danger" type="submit" name="DeleteAll" value="DeleteAll" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash"></i>
                    @Wording.Delete
                </button>
            }
        }
    }
    else
    {
        @Html.Grid(Model).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Name).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
    }).WithPaging(10)
    }
    @section Scripts {
        <script type="text/javascript">
            function CheckIsval() {
                if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                    alert("Phải chọn ít nhất 1 item.");
                    return false;
                }
                else {
                    if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }

            $('[name="Delete"]').click(function () {
                if (confirm('Bạn có chắc muốn xóa item ?')) {
                    $(this).closest('tr').children('td').each(function (i, e) {
                        $(this).find("input.class-delete-all").prop("checked", true);
                        return true;
                    })
                }
                else {
                    return false;
                }

            })
            $(document).ready(function () {

                $('#tab_0').addClass("active");
                $('#tab_li_0').addClass("active");
            });
        </script>
    }
