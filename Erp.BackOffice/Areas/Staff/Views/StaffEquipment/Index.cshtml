@model IEnumerable<StaffEquipmentViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Staff.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = "Danh sách trang thiết bị";
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "StaffEquipment",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            <button name="Delete" value="@id" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        </p>
    </div>
}

@helper GridColumnName(string name, int id, bool isPopup)
{
if (isPopup)
{
        <a onclick="parent.selectBranchItem(@id)">@name</a>
}
else
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("Edit", "StaffEquipment", new { Id = id })">@name</a>
}
}

@helper GridColumnCategoryValue(string value, string code)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueCodeOrId("value", value,code);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl" title="" ></span>
    </label>
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @*@Html.TextBox("code", Request["code"], new { @class = "", autocomplete = "off", placeholder = "Mã thiết bị..." })
        @Html.TextBox("name", Request["name"], new { @class = "", autocomplete = "off", placeholder = "Tên thiết bị..." })*@
        @Html.TextBox("info", Request["info"], new { @class = "", autocomplete = "off", placeholder = "Mã hoặc tên thiết bị..." })
        @*@Html.DropDownList("BranchId", SelectListHelper.GetSelectList_Branch(Request["BranchId"], "Chi nhánh"))*@
        @Html.DropDownList("group", SelectListHelper.GetSelectList_Category("EquimentGroup", Request["group"], "Nhóm thiết bị"))
    </p>
}
@if (!isPopup)
{
    using (Html.BeginForm("Delete", pageSetting.ModuleName, FormMethod.Post))
    {
        @Html.Grid(Model).Columns(columns =>
        {
            columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add(u => u.Code).Titled(Wording.StaffEquipmentCode).SetWidth(100);
            columns.Add().Titled(Wording.StaffEquipmentName).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
            columns.Add(u => u.Status).Titled("Trạng Thái").SetWidth(100);
            columns.Add(u => u.InspectionDate).Format("{0:dd/MM/yyyy}").Titled(Wording.InspectionDate).SetWidth(100);
            columns.Add().Titled(Wording.Group).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCategoryValue(u.Group,"EquimentGroup"));
            columns.Add(u => u.CreatedDate).Format("{0:dd/MM/yyyy HH:mm}").Titled(Wording.CreatedDate).SetWidth(150);
            //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
            columns.Add(u => u.ModifiedDate).Format("{0:dd/MM/yyyy HH:mm}").Titled(Wording.ModifiedDate).SetWidth(150).Sortable(true);
            columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
        }).WithPaging(10)

        using (Html.BeginButtonContainer(pageSetting))
        {
            <a class="btn btn-primary btn-mini" href="@Url.Action("Create", pageSetting.ModuleName)">
                <i class="ace-icon fa fa-plus"></i>
                @Wording.CreateNew
            </a>
    
            <button class="btn btn-success btn-mini" type="button" value="Export" onclick="GetPrint(true)">
                <i class="ace-icon fa fa-file-excel-o"></i>
                Xuất excel
            </button>
    
            <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                <i class="ace-icon fa fa-trash bigger-120"></i>
                @Wording.Delete
            </button>
        }
    }
}
else
{
    @Html.Grid(Model).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Name).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
    }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        function GetPrint(type) {
            var info = $('#info').val();
            var group = $('#group').val();

            OpenPopup('/StaffEquipment/ExportExcel?info=' + info + '&group=' + group + '&ExportExcel=' + type + '&IsPopup=true', '', 0, 900);

            setTimeout(function () {
                $("#myModal .modal-body .iframe-container").html("");
                $('#myModal').modal('hide');
            }, 200000);
            HideLoading();
        };

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                   // $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

        $('.grid-header').mouseover(function () {
            $('.grid-header')[0].title = "Chọn tất cả";
        });

        $('.class-delete-all').on('click', function () {
            if ($('.class-delete-all:checked').length == $('.class-delete-all').length) {
                $('#checkAll').prop('checked', true);
            } else {
                $('#checkAll').prop('checked', false);
            }
        });
    </script>
}
