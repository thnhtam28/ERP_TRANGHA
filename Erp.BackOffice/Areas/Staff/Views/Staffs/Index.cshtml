@model StaffListViewModel

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Staff.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_Staff;
    bool isPopup = Request["popup"] != null && Request["popup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Staffs",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
}

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
            <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        </p>
    </div>
}

@helper GridColumnName(string name, int id, bool isPopup)
{
    if (isPopup)
    {
        <a onclick="parent.selectStaffsItem(@id)">@name</a>
    }
    else
    {
        if (string.IsNullOrEmpty(name))
        {
            <a href="@Url.Action("Edit", "Staffs", new { Id = id })">No Title</a>
        }
        else
        {
            <a href="@Url.Action("Edit", "Staffs", new { Id = id })">@name</a>
        }
    }
}

@helper GridColumnProfileImage(string ProfileImage, string name)
{
        <a data-toggle="tooltip" title='
            <img src="@(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(ProfileImage,"Staff","user"))" width="248" />'>
            <img class="profile-picture" src="@(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(ProfileImage,"Staff","user"))" width="65" height="80" alt="@name" />
        </a>
}

@helper GridColumnDate(object date)
{
    string sOut = date != null ? ((DateTime)date).ToString("dd/MM/yyyy") : "01/01/1900";
    if (sOut != "01/01/1900")
    {
        <span>@sOut</span>
    }
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@using (Html.BeginPageHeaderContainer(pageSetting))
{
        @Html.Hidden("popup", isPopup)
        @Html.TextBox("DormitoryCardCode", Request["DormitoryCardCode"], new { @class = "form-control", autocomplete = "off", placeholder = "Tên nhân viên" })
}

@if (!isPopup)
{
    using (Html.BeginForm("Delete", "Staffs", FormMethod.Post))
    {
        @Html.Grid(Model.ListStaffsViewModel).Columns(columns =>
        {
            columns.Add().Titled(Wording.Image).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => GridColumnProfileImage(n.ProfileImage, n.Name));
            columns.Add(u => u.Code).Titled(Wording.CodeStaff).SetWidth(100).RenderValueAs(u => u.Code);
            columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
            columns.Add().Titled(Wording.Birthday).SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(n => GridColumnDate(n.Birthday));
            columns.Add().Titled(Wording.Ethnic).SetWidth(100).RenderValueAs(n => n.Ethnic);
            columns.Add().Titled(Wording.Address).SetWidth(200).RenderValueAs(n => n.Address);
            columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
        }).WithPaging(10)
    }
}
else
{
    @Html.Grid(Model.ListStaffsViewModel).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
    }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>
}