@model IEnumerable<BonusDisciplineViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Staff.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = Wording.PageIndex_BonusDiscipline;
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "BonusDiscipline",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = true,
            IsPopup = false,
            DisplayBackButton = false
        };
        var path = Erp.BackOffice.Helpers.Common.GetSetting("Staff");
    }


    @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="icon-remove"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-danger">
            <button type="button" class="close" data-dismiss="alert">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-times"></i>
            @Html.Raw(ViewBag.FailedMessage)
        </div>
    }
    <link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
    @helper GridColumnResidenceInfo(string Code, string DayDecision, string DayEffective, int? id, string NameUser)
        {
            <a onclick="OpenPopup('@Url.Action("Edit", "BonusDiscipline", new { area = "Staff", Id = id, IsPopup = "true" })', '@Wording.PageEdit_BonusDiscipline', 500, 500)"><p class="sum"><i class="glyphicon glyphicon-qrcode" data-rel="tooltip" title="" data-placement="bottom" data-original-title="Mã quyết định"></i>  @Code</p></a>
            <p class="sum"><i class="fa fa-calendar-minus-o" data-rel="tooltip" title="" data-placement="bottom" data-original-title="Ngày quyết định"></i>  @DayDecision -  <i class="fa fa-calendar-check-o" data-rel="tooltip" title="" data-placement="bottom" data-original-title="Ngày hiệu lực"></i>  @DayEffective</p>
            <p class="sum"><i class="fa fa-user-circle-o" data-rel="tooltip" title="" data-placement="bottom" data-original-title="Người lập phiếu"></i>  @NameUser</p>
}
    @helper GridColumnName(string name, int id, string code, DateTime? birthday, bool gender, string ProfileImage, string path)
        {
            <div class="col-xs-4">
                <div class="ace-thumbnails clearfix">
                    <a href="@(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(ProfileImage,"Staff","user"))" title="@name" data-rel="colorbox" class="cboxElement">
                        <img class="" src="@(Erp.BackOffice.Helpers.Common.KiemTraTonTaiHinhAnh(ProfileImage,"Staff","user"))" style="width:65px;height:75px;border:1px solid #808080" />
                    </a>
                </div>
            </div>
            <div class="col-xs-8">
                @if (string.IsNullOrEmpty(name))
                {
                    <p> <a href="@Url.Action("Detail", "Staffs", new { area = "Staff", Id = id })" target="_blank"><b><i class="fa fa-user-circle-o"></i>  No Title</b></a></p>
                }
                else
                {
                    <p>
                        <a href="@Url.Action("Detail", "Staffs", new { area = "Staff", Id = id })" target="_blank">
                            <b>
                                @if (gender == true)
                                {
                                    <i style="color:#ff00dc" class="fa fa-female" data-rel="tooltip" title="" data-placement="bottom" data-original-title="Giới tính: Nữ"></i>
                                }
                                else
                                {
                                    <i class="fa fa-male" data-rel="tooltip" title="" data-placement="bottom" data-original-title="Giới tính: Nam"></i>
                                }
                                @name
                            </b>
                        </a>
                    </p>
                    <p><i class="fa fa-barcode" data-rel="tooltip" title="" data-placement="bottom" data-original-title="Mã nhân viên"></i> @code</p>
                    <p><i class="fa fa-calendar" data-rel="tooltip" title="" data-placement="bottom" data-original-title="Ngày sinh"></i> @birthday.Value.ToString("dd/MM/yyyy")</p>
                }
            </div>
}
    @helper GridColumsBonusDescipline(string PlaceDecisions, string Reason, string Formality)
        {
            <p class="sum">- Lý do:  @Reason</p>
            <p class="sum">- Hình thức:  @Formality</p>
            <p class="sum">- Nơi ra quyết định: @PlaceDecisions</p>
}
    @helper GridColumnCommand(int id)
        {
            <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
                <p>
                    <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                        <i class="ace-icon fa fa-trash bigger-120"></i>
                    </button>
                </p>
            </div>
}
    @helper CheckDeleteColumns(int Id)
        {
            <label>
                <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
                <span class="lbl"></span>
            </label>
}

    @helper BuildCheckAll()
        {
            <label>
                <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
                <span class="lbl"></span>
            </label>
}
    @section HeadOfPage {
        @Html.ScriptTop_ChosenStyle()
    }
    <style>
        .profile-picture {
            padding: 0px;
        }
    </style>
    @using (Html.BeginPageHeaderContainer(pageSetting))
    {
        <p>
            @Html.TextBox("Code", Request["Code"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.CodeDecisions + "..." })
            @Html.TextBox("Name", Request["Name"], new { @class = "form-control", autocomplete = "off", placeholder = Wording.CodeNameStaff + "..." })
            <span class="input-daterange input-group">
                @Html.TextBox("start_DayDecision", Request["start_DayDecision"] != null ? Request["start_DayDecision"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "Ngày quyết định từ..." })
                <span class="input-group-addon">
                    <i class="fa fa-exchange"></i>
                </span>
                @Html.TextBox("end_DayDecision", Request["end_DayDecision"] != null ? Request["end_DayDecision"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "đến..." })
            </span>
            <span class="input-daterange input-group">
                @Html.TextBox("start_date", Request["start_date"] != null ? Request["start_date"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "Ngày hiệu lực từ..." })
                <span class="input-group-addon">
                    <i class="fa fa-exchange"></i>
                </span>
                @Html.TextBox("end_date", Request["end_date"] != null ? Request["end_date"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "đến..." })
            </span>

            @Html.DropDownList("branchId", SelectListHelper.GetSelectList_Branch(Request["branchId"], Wording.BranchName), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
            @Html.DropDownList("DepartmentId", new List<SelectListItem> { new SelectListItem { Text = "Phòng ban", Value = "" } }, new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
            @Html.DropDownList("Position", SelectListHelper.GetSelectList_Category("position", Request["Position"], "Value", Wording.Position), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
            @Html.DropDownList("Category", SelectListHelper.GetSelectList_Category("BonusDiscipline_Category", Request["Category"], "Value", Wording.Category), new Dictionary<string, object> { { "class", "form-control" }, { "data-val-required", "Bắt buộc chọn." } })
        </p>
    }
    @using (Html.BeginForm("Delete", "BonusDiscipline", FormMethod.Post))
    {
        if (Model != null)
        {
            <div class="table-responsive">
                @Html.Grid(Model).Columns(columns =>
                {
                    columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(10).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
                    columns.Add().Titled(Wording.InfoStaff).SetWidth(300).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.StaffId.Value, u.StaffCode, u.Birthday, u.Gender.Value, u.ProfileImage, path));
                    columns.Add().Titled(Wording.InfoDecisions).SetWidth(200).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnResidenceInfo(u.Code, u.DayDecision.HasValue ? u.DayDecision.Value.ToString("dd/MM/yyyy") : "", u.DayEffective.HasValue ? u.DayEffective.Value.ToString("dd/MM/yyyy") : "", u.Id, u.CreatedUserName));
                    columns.Add().Titled(Wording.Content).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumsBonusDescipline(u.PlaceDecisionsName, u.Reason, u.Formality));
       //columns.Add(u => u.Category).Titled(Wording.Category).SetWidth(100);
       columns.Add(u => u.Note).Titled(Wording.Note);
       //columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(100);
       //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
       //columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(100).Sortable(true);
       columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
                }).WithPaging(10)
            </div>
        }
        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "BonusDiscipline", "Staff"))
            {
                @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Primary, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { @class = "btn-BonusDisciplineCreate", @onclick = "OpenPopup('" + Url.Action("Create", "BonusDiscipline", new { area = "Staff", IsPopup = "true" }) + "', '" + Wording.PageCreate_BonusDiscipline + "', 0, 500)" })
            }
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "BonusDiscipline", "Staff"))
            {
                <button class="btn btn-mini btn-danger" type="submit" name="DeleteAll" value="DeleteAll" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash"></i>
                    @Wording.Delete
                </button>
            }
        }
    }
    @section Scripts {
        <script>
            $(document).ready(function () {
                $('[data-rel="tooltip"]').tooltip({ container: 'body' });
            });

            function ClosePopupAndDoSomething() {
                ClosePopup(true);
            }
            //Fetch Department of University
            var urDepartmentl = '/api/BackOfficeServiceAPI/FetchBranchDepartment';
            var department = $('[name="DepartmentId"]'); // cache it

            $('[name="branchId"]').change(function () {
                ShowLoading();
                department.empty(); // remove any existing options
                $(document.createElement('option'))
                    .attr('value', '')
                    .text('- Rỗng -')
                    .appendTo(department).trigger('chosen:updated');
                var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
                $.getJSON(urDepartmentl, { BranchId: id }, function (response) {
                    department.empty(); // remove any existing options

                    $(response).each(function () {
                        $(document.createElement('option'))
                            .attr('value', this.Id)
                            .text(this.Staff_DepartmentId)
                            .appendTo(department).trigger('chosen:updated');
                        HideLoading();
                    });
                });
            });
            function CheckIsval() {
                if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                    alert("Phải chọn ít nhất 1 item.");
                    return false;
                }
                else {
                    if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }

            $('[name="Delete"]').click(function () {
                if (confirm('Bạn có chắc muốn xóa item ?')) {
                    $(this).closest('tr').children('td').each(function (i, e) {
                        $(this).find("input.class-delete-all").prop("checked", true);
                        return true;
                    })
                }
                else {
                    return false;
                }

            })
            function ClosePopupAndReloadPageStaffDetail() {
                ClosePopup(true);
                ShowLoading();
            };
            function ClosePopupAndAppendSelect() {
                ShowLoading();
                ClosePopup(true);
            }

            function ClosePopupAndRedirectToURL(url) {
                ClosePopup(true);
                location.href = url;
            }
        </script>
        @Html.ScriptBottom_ValidationMvc()
        @Html.ScriptBottom_DatePicker("dd/mm/yyyy")
        @Html.ScriptBottom_ChosenStyle()
    }
