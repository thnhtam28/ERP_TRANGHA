@model IEnumerable<TransferWorkViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Staff.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_TransferWork;
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "TransferWork",
        ActionName = "List",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = false
    };
}


<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnStatus(string Status)
{
    switch (Status)
    {
        case "Chờ duyệt":
            <label class="label label-info  arrowed-in-right">@Status</label>
            break;
        case "Hủy":
        <label class="label label-black arrowed-in-right">@Status</label>
            break;
        case "Đã duyệt":
        <label class="label label-warning arrowed-in-right">@Status</label>
            break;
        case "Đã chuyển":
        <label class="label label-success arrowed-in-right">@Status</label>
            break;
        case "Từ chối":
        <label class="label label-danger arrowed-in-right">@Status</label>
            break;
    }
}
@helper GridColumnCode(string Code,int id)
{
    <a title="Mã quyết định điều chuyển công tác" onclick="OpenPopup('@Url.Action("Detail", "TransferWork", new { Id = id, IsPopup = true })', '@Wording.PageDetail_TransferWork', 500, 700)"><b> @Code</b></a>
}


@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
    <style>
        .label-black.arrowed-in-right:after {
            border-color: #666 transparent #666 #666;
        }

        .label-black.arrowed-in:before {
            border-color: #666 #666 #666 transparent;
        }

        .chosen-container-single .chosen-single span {
            margin-top: -5px;
        }

        .profile-picture {
            padding: 0px;
        }

        select {
            height: 34px;
            margin-right: 5px;
        }

        .form-inline .control-label, .form-inline .form-group {
            margin-bottom: 5px;
            vertical-align: middle;
        }

        .form-search .control-group select, .form-search .control-group input {
            margin-right: 0px !important;
        }
    </style>
}

@if (Model != null)
{
    <div class="table-responsive">
        @Html.Grid(Model).Columns(columns =>
                    {
                        columns.Add().Titled(Wording.DayDecision).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.DayDecision.Value.ToString("dd/MM/yyyy"));
                        columns.Add().Titled(Wording.Status).Sortable(false).SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnStatus(u.Status));
                        columns.Add().Titled(Wording.CodeDecisions).SetWidth(300).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCode(u.Code,u.Id));
                        columns.Add().Titled(Wording.DayEffective).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.DayEffective.Value.ToString("dd/MM/yyyy"));
                        columns.Add().Titled(Wording.BranchNewId).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.BranchNameNew);
                        columns.Add().Titled(Wording.BranchDepartmentNewId).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.Staff_DepartmentNew);
                        columns.Add().Titled(Wording.PositionNew).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.PositionNewName);
                        columns.Add(u => u.Reason).Titled(Wording.Reason);
                    }).WithPaging(10)
    </div>
}

